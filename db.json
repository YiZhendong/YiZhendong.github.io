{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.266c1c.css","path":"main.266c1c.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.096dc6.js","path":"slider.096dc6.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.266c1c.js","path":"main.266c1c.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.906508.js","path":"mobile.906508.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/mine.jpg","path":"img/mine.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/receiveMoney.png","path":"img/receiveMoney.png","modified":0,"renderable":1},{"_id":"source/images/didi.jpg","path":"images/didi.jpg","modified":0,"renderable":0},{"_id":"source/images/didi-excel.jpg","path":"images/didi-excel.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"e31fb4913b8c2b1b6175bf7e831c5fc24372a9f1","modified":1501594367247},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1500792095733},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1500792095733},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1500792095733},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1500792095734},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1500792095734},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1500792095735},{"_id":"themes/yilia/_config.yml","hash":"86299d15485335e2b07017980f0939afbc77ef6d","modified":1501075528972},{"_id":"themes/yilia/README.md","hash":"86757b00d393bd4956a252d92a469f11f2ae8914","modified":1500792095736},{"_id":"themes/yilia/mine.jpg","hash":"b6bf87f086c2042ffc0aacaca379ca8d782c6cbc","modified":1500796171751},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1500792095758},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1500792095794},{"_id":"source/_posts/Guava VS Java 8 (1) Optional.md","hash":"f2c65e9c4c12bb8494f6623fbfe8a129122cac66","modified":1511371732554},{"_id":"source/_posts/Guava VS Java 8 (2) Precondition.md","hash":"cf3f6451b409ecbaf69c8121f61f35f3594798f9","modified":1511454406729},{"_id":"source/_posts/Guava VS Java 8 (3) Functional Programmming.md","hash":"ec90183428a9e2f8220986ef57b5ae5bf1e82e98","modified":1513691256667},{"_id":"source/_posts/How to Design a Restful Api.md","hash":"eb8838763e337f542812f1e1a51982503eab02cd","modified":1510482167920},{"_id":"source/_posts/Plan 2019.md","hash":"84cf58c598b9735cd5b949f9127d6355ecdf6604","modified":1553437415455},{"_id":"source/_posts/Note About Guava.txt","hash":"29b4242b15dcd113080799a7667ec11b9e4444fa","modified":1511362502897},{"_id":"source/_posts/Tht SpringBoot internal tomcat buffer directory was deleted leading to failures.md","hash":"3e0eaf078e95907858dcb1ff2845274064f64cc2","modified":1508341887508},{"_id":"source/_posts/didi-taxi-tool.md","hash":"e4b56c2d0b7f5431d766ac49314caf08a6128462","modified":1502611315606},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1500784523032},{"_id":"source/_posts/zander-s-todo-list.md","hash":"90b730f109d835ce91b2693b9cb00d6db38f73b7","modified":1511372495513},{"_id":"themes/yilia/.git/FETCH_HEAD","hash":"28b7c6cb1cdb1f7b912dfc6e802ff7196eb222be","modified":1500800576860},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1500792095717},{"_id":"themes/yilia/.git/ORIG_HEAD","hash":"4d8071322662d313a09ff7b2e716002870d8c94c","modified":1500800576926},{"_id":"themes/yilia/.git/config","hash":"24300cece9d72967ea63724bdb2a8e3c2ac2cc52","modified":1500792095723},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1500791754859},{"_id":"themes/yilia/.git/index","hash":"9992d9ea6f9128f1060157c5c1362ee743cf4432","modified":1500792095795},{"_id":"themes/yilia/.git/packed-refs","hash":"4dc64835d90ebd62d3df9c760251d3ee4fe50711","modified":1500792095713},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1500792095737},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1500792095737},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1500792095738},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1500792095738},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1500792095738},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1500792095739},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1500792095739},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1500792095755},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1500792095755},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1500792095756},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1500792095756},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1500792095756},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1500792095757},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1500792095758},{"_id":"themes/yilia/source/main.266c1c.css","hash":"6b9cfabb81f021081a93da5a069674e9be910194","modified":1500792095791},{"_id":"themes/yilia/source/slider.096dc6.js","hash":"a8b66ef85d96616086ea6256e7288d0b5a2df56d","modified":1500792095794},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1500792095758},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1500792095785},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500792095753},{"_id":"themes/yilia/source/main.266c1c.js","hash":"59ccafbd45d28c397a8a901152ef5e196077e4f4","modified":1500792095792},{"_id":"themes/yilia/source/mobile.906508.js","hash":"86e50eecba93644d6cf4f78fd4f9ff54a0ea82d5","modified":1500792095793},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1500791754860},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1500791754861},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1500791754861},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1500791754862},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1500791754862},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1500791754867},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1500791754868},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1500791754868},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1500791754869},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1500791754869},{"_id":"themes/yilia/.git/logs/HEAD","hash":"cc2a2d56859ca0bb3a8cc0025608432a6ee2be0b","modified":1500792095721},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1501073914511},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1500792095740},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1500792095741},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"b75e8fff732292fa26b5a0b47cd253d4281e321a","modified":1500792095741},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1500792095741},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1500792095742},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"9bfcbd9e71401b6da6b2bbbe61e97625ca247b7a","modified":1500792095744},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"5a4429a48c9456d8013a0d96e38474d86647ec3f","modified":1500804539268},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1500792095745},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1500792095746},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1500792095746},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"2387d91cf94b0b36e8a36841992a5fce63ebd069","modified":1500792095747},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1500792095747},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1500792095748},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1500792095754},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1500792095754},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1500792095786},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1500792095786},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1500792095787},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1500792095787},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1500792095788},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1500792095788},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1500792095789},{"_id":"themes/yilia/source/img/mine.jpg","hash":"b6bf87f086c2042ffc0aacaca379ca8d782c6cbc","modified":1500796171751},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1500792095789},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1500792095790},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1500792095759},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1500792095759},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1500792095760},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1500792095760},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1500792095761},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1500792095761},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1500792095762},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1500792095762},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"e6e83d4863afcc589d4dd2f327e9f396f7d7b343","modified":1500792095762},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1500792095766},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1500792095769},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1500792095769},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1500792095769},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1500792095770},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1500792095771},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1500792095772},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1500792095772},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1500792095773},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1500792095773},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1500792095773},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1500792095774},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1500792095774},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1500792095775},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1500792095775},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1500792095775},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"17a97f7c38f5dfacc3eadf354b5826d77f1c2bdb","modified":1500792095776},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1500792095776},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1500792095777},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1500792095778},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1500792095778},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1500792095778},{"_id":"themes/yilia/source-src/js/fix.js","hash":"9bb1a4918c1b1ee62ce0a71381990a1978c51b2a","modified":1500792095779},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1500792095779},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1500792095780},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1500792095781},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1500792095781},{"_id":"themes/yilia/source-src/js/slider.js","hash":"3bf0d70ae171404a0dc73c33ec48927fc2521a54","modified":1500792095782},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1500792095782},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"808a2e1ed407984cfdc929b827d3638f70ec9a2a","modified":1500792095784},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"171b130d25c36f496e4b43e3808707a8f1897729","modified":1500792095753},{"_id":"themes/yilia/source/img/receiveMoney.png","hash":"84513e6b7ada8e7915ece4226cbe0ac6d30d1b9b","modified":1500802234706},{"_id":"themes/yilia/.git/objects/pack/pack-4a69d2b0ca35f096f2341bc051ec83a248aca039.idx","hash":"aa9dfee43bbb960f6511e54f43a6712f1e81866a","modified":1500792095494},{"_id":"themes/yilia/.git/refs/heads/master","hash":"4d8071322662d313a09ff7b2e716002870d8c94c","modified":1500792095719},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"c2dccf1a95ec09ceeee5004293ac7edb7e1c9a66","modified":1500792095748},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1500792095749},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"9f9fa4f8b0de5f87a9494fd0cb5064502a5d5ef5","modified":1500792095749},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1500792095749},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1500792095750},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"341103df70d0b476e3acd0afbc507a4a120d8f5f","modified":1500792095750},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1500792095751},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1500792095751},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1500792095752},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1500792095763},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1500792095764},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1500792095764},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1500792095765},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1500792095765},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1500792095766},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1500792095767},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1500792095768},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1500792095768},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1500792095770},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1500792095771},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1500792095771},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"cc2a2d56859ca0bb3a8cc0025608432a6ee2be0b","modified":1500792095720},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1500792095717},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"cc2a2d56859ca0bb3a8cc0025608432a6ee2be0b","modified":1500792095716},{"_id":"source/images/didi.jpg","hash":"2a655e9c3d374be8bdccd5707d48b21354c73f7d","modified":1502609334292},{"_id":"source/images/didi-excel.jpg","hash":"110f281587793406785bac6ab4c4a89c228d7546","modified":1502610356597},{"_id":"themes/yilia/.git/objects/pack/pack-4a69d2b0ca35f096f2341bc051ec83a248aca039.pack","hash":"2b1e7912340fd292f00d20d26276ce28840fd79c","modified":1500792095593},{"_id":"public/content.json","hash":"8dd2b67a2f84ab106bdf04380f05a469119c6004","modified":1553437578952},{"_id":"public/2019/01/02/Plan 2019/index.html","hash":"d12f081b73498b7a63f7a18966f1fde44349874f","modified":1553437579264},{"_id":"public/2017/12/19/Guava VS Java 8 (3) Functional Programmming/index.html","hash":"979d05d0462f985a1e9d324fd4b8bdb319f6f658","modified":1553437579296},{"_id":"public/2017/11/23/Guava VS Java 8 (2) Precondition/index.html","hash":"82fd63e238be6fe908fb021d5b4ad97c9e6aa595","modified":1553437579296},{"_id":"public/2017/11/22/Guava VS Java 8 (1) Optional/index.html","hash":"62f10f3a9ece73b07a76ac50b096a5f9cf498a3f","modified":1553437579296},{"_id":"public/2017/11/12/How to Design a Restful Api/index.html","hash":"c07f23fa6198e91833e35f1ab8c17a18ab8cca95","modified":1553437579296},{"_id":"public/2017/10/18/Tht SpringBoot internal tomcat buffer directory was deleted leading to failures/index.html","hash":"24ac05517b9fd8d070e4474f57816dbbfd89dd42","modified":1553437579296},{"_id":"public/2017/08/13/didi-taxi-tool/index.html","hash":"062d0ffbb77580c82a59e56dd7808eb4195efd65","modified":1553437579296},{"_id":"public/2017/07/27/zander-s-todo-list/index.html","hash":"98ab855cac672a2fe48d832bfcd1bc0a0d1f3bd8","modified":1553437579296},{"_id":"public/2017/07/23/hello-world/index.html","hash":"d44bcf8031998e8b1afa464ad6c402b6bd741bc5","modified":1553437579296},{"_id":"public/archives/index.html","hash":"d33a7fc393766c592ac3978f8f5f0c4517342ea7","modified":1553437579296},{"_id":"public/archives/2017/index.html","hash":"715f8d63d49e6e5c6893f16299d19b02a813de91","modified":1553437579296},{"_id":"public/archives/2017/07/index.html","hash":"86fdfb245c9e3bd3038d8739dcd16f18d021e615","modified":1553437579296},{"_id":"public/archives/2017/08/index.html","hash":"5c710ec14e533c04d2776d3f629c9757ba27201b","modified":1553437579296},{"_id":"public/archives/2017/10/index.html","hash":"8a229f8912ca7b29af7335384c3791bcb4d1484b","modified":1553437579296},{"_id":"public/archives/2017/11/index.html","hash":"1c189b8b336cdd74c9fd6f69487df1390d9a321f","modified":1553437579296},{"_id":"public/archives/2017/12/index.html","hash":"68f38c6661b7a21a99cf9524f80208c834b65f66","modified":1553437579296},{"_id":"public/archives/2019/index.html","hash":"abdbb691e81cc0ec70e8cb8c07b62bda553e9e6f","modified":1553437579296},{"_id":"public/archives/2019/01/index.html","hash":"79a217b4bcf7b54d767913bd0a069d589f9993c4","modified":1553437579296},{"_id":"public/index.html","hash":"24ef67065042b44b06d53dc58922b681877c7ed1","modified":1553437579296},{"_id":"public/tags/Java/index.html","hash":"3a22756c718a932052d66e6438ef80f59415672e","modified":1553437579296},{"_id":"public/tags/Guava/index.html","hash":"cdaa3ebb31c17783c40aecf34819af163aeca4a4","modified":1553437579296},{"_id":"public/tags/日常/index.html","hash":"3099089fe27e76d983191505e6b8ec0cb3f8bbc5","modified":1553437579296},{"_id":"public/tags/springboot/index.html","hash":"ac4696bad58076fb8f5186f3450f8a6f30f5a9fd","modified":1553437579296},{"_id":"public/CNAME","hash":"e31fb4913b8c2b1b6175bf7e831c5fc24372a9f1","modified":1553437579311},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1553437579311},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1553437579311},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1553437579311},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1553437579311},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1553437579311},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1553437579311},{"_id":"public/img/mine.jpg","hash":"b6bf87f086c2042ffc0aacaca379ca8d782c6cbc","modified":1553437579311},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1553437579311},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1553437579311},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1553437579311},{"_id":"public/img/receiveMoney.png","hash":"84513e6b7ada8e7915ece4226cbe0ac6d30d1b9b","modified":1553437579358},{"_id":"public/slider.096dc6.js","hash":"a8b66ef85d96616086ea6256e7288d0b5a2df56d","modified":1553437579389},{"_id":"public/main.266c1c.css","hash":"6b9cfabb81f021081a93da5a069674e9be910194","modified":1553437579389},{"_id":"public/main.266c1c.js","hash":"59ccafbd45d28c397a8a901152ef5e196077e4f4","modified":1553437579389},{"_id":"public/mobile.906508.js","hash":"86e50eecba93644d6cf4f78fd4f9ff54a0ea82d5","modified":1553437579389},{"_id":"public/images/didi.jpg","hash":"2a655e9c3d374be8bdccd5707d48b21354c73f7d","modified":1553437579421},{"_id":"public/images/didi-excel.jpg","hash":"110f281587793406785bac6ab4c4a89c228d7546","modified":1553437579436}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Guava VS Java 8 (2) Preconditions","date":"2017-11-23T15:30:00.000Z","_content":"\nGuava中的Preconditions类提供了一个静态方法列表，用于检查是否使用有效的参数值调用方法或构造函数。如果前提条件失败，则抛出一个特定的异常。\n\nGuava中的静态判断方法目前有5类，每一类又有很多种不同的方法，充分满足各种情况下的判断\n> * checkArgument()\n> * checkState()\n> * checkNotNull()\n> * checkElementIndex()\n> * checkPositionIndex()\n\n而Java 8中包含了对于NULL的判断(前两个在Java 7中已有，第三个是8中新加)\n> * Objects.requireNonNull(T obj);\n> * Objects.requireNonNull(T obj, String str);\n> * Objects.requireNonNull(T obj, Supplier<String> messageSupplier);\n\n从这两类判断方法来看，Guava目前还是包含了更多的情况，对于各种情况也支持比较充分，对于前置判断来说，Guava更加方便，如果只是单纯的判断是否为NULL，则Java 8也可以正常支持。","source":"_posts/Guava VS Java 8 (2) Precondition.md","raw":"---\ntitle: Guava VS Java 8 (2) Preconditions\ndate: 2017-11-23 23:30:00\ntags: \n    - Java \n    - Guava\n---\n\nGuava中的Preconditions类提供了一个静态方法列表，用于检查是否使用有效的参数值调用方法或构造函数。如果前提条件失败，则抛出一个特定的异常。\n\nGuava中的静态判断方法目前有5类，每一类又有很多种不同的方法，充分满足各种情况下的判断\n> * checkArgument()\n> * checkState()\n> * checkNotNull()\n> * checkElementIndex()\n> * checkPositionIndex()\n\n而Java 8中包含了对于NULL的判断(前两个在Java 7中已有，第三个是8中新加)\n> * Objects.requireNonNull(T obj);\n> * Objects.requireNonNull(T obj, String str);\n> * Objects.requireNonNull(T obj, Supplier<String> messageSupplier);\n\n从这两类判断方法来看，Guava目前还是包含了更多的情况，对于各种情况也支持比较充分，对于前置判断来说，Guava更加方便，如果只是单纯的判断是否为NULL，则Java 8也可以正常支持。","slug":"Guava VS Java 8 (2) Precondition","published":1,"updated":"2017-11-23T16:26:46.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtn0mi3v0000u4u1r6cxlgyx","content":"<p>Guava中的Preconditions类提供了一个静态方法列表，用于检查是否使用有效的参数值调用方法或构造函数。如果前提条件失败，则抛出一个特定的异常。</p>\n<p>Guava中的静态判断方法目前有5类，每一类又有很多种不同的方法，充分满足各种情况下的判断</p>\n<blockquote>\n<ul>\n<li>checkArgument()</li>\n<li>checkState()</li>\n<li>checkNotNull()</li>\n<li>checkElementIndex()</li>\n<li>checkPositionIndex()</li>\n</ul>\n</blockquote>\n<p>而Java 8中包含了对于NULL的判断(前两个在Java 7中已有，第三个是8中新加)</p>\n<blockquote>\n<ul>\n<li>Objects.requireNonNull(T obj);</li>\n<li>Objects.requireNonNull(T obj, String str);</li>\n<li>Objects.requireNonNull(T obj, Supplier<string> messageSupplier);</string></li>\n</ul>\n</blockquote>\n<p>从这两类判断方法来看，Guava目前还是包含了更多的情况，对于各种情况也支持比较充分，对于前置判断来说，Guava更加方便，如果只是单纯的判断是否为NULL，则Java 8也可以正常支持。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Guava中的Preconditions类提供了一个静态方法列表，用于检查是否使用有效的参数值调用方法或构造函数。如果前提条件失败，则抛出一个特定的异常。</p>\n<p>Guava中的静态判断方法目前有5类，每一类又有很多种不同的方法，充分满足各种情况下的判断</p>\n<blockquote>\n<ul>\n<li>checkArgument()</li>\n<li>checkState()</li>\n<li>checkNotNull()</li>\n<li>checkElementIndex()</li>\n<li>checkPositionIndex()</li>\n</ul>\n</blockquote>\n<p>而Java 8中包含了对于NULL的判断(前两个在Java 7中已有，第三个是8中新加)</p>\n<blockquote>\n<ul>\n<li>Objects.requireNonNull(T obj);</li>\n<li>Objects.requireNonNull(T obj, String str);</li>\n<li>Objects.requireNonNull(T obj, Supplier<string> messageSupplier);</string></li>\n</ul>\n</blockquote>\n<p>从这两类判断方法来看，Guava目前还是包含了更多的情况，对于各种情况也支持比较充分，对于前置判断来说，Guava更加方便，如果只是单纯的判断是否为NULL，则Java 8也可以正常支持。</p>\n"},{"title":"Guava VS Java 8 (3) Functional Programming 函数式编程","date":"2017-12-19T11:51:00.000Z","_content":"## 什么是函数式编程\n什么是函数式编程，简单的回答就是：一切都是数学函数。wiki上是这样定义的：函数式编程（英语：functional programming）或称函数程序设计，又称泛函编程，是一种编程典范，它将电脑运算视为数学上的函数计算，并且避免使用程序状态以及易变对象。函数编程语言最重要的基础是λ演算（lambda calculus）。而且λ演算的函数可以接受函数当作输入（引数）和输出（传出值）。换一种可以理解的说法，就是在函数式编程中，对象只代表参数：入参以及出参，参数没有状态的改变。同时，在函数式编程中没有for/next的循环，这个循环意味着状态随时可以改变，相反的是，函数式编程中，通过递归来实现这种改变。\n\n## java 8 和 guava中的函数式编程\n在guava中，除了集合的一些函数式接口，例如Collection2.filter等以外，还提供了两个基本的函数式接口，分别是：\n> * Function<A, B>\n> * Predicate<T>\n\n举两个例子，分别说明Function和predicate的用法\n```java\n//使用自定义的Predicate函数\nList<Integer> numbers = Lists.newArrayList(1, 2, 3, 6, 10, 34, 57, 89);\nPredicate<Integer> acceptEven = new Predicate<Integer>() {\n    @Override\n    public boolean apply(Integer number) {\n        return (number % 2) == 0;\n    }\n};\nList<Integer> evenNumbers = Lists.newArrayList(Collections2.filter(numbers, acceptEven));\nInteger found = Collections.binarySearch(evenNumbers, 57);\nassertThat(found, lessThan(0));\n\n\n//使用一个简单的Function函数\nList<Integer> numbers = Lists.newArrayList(1, 2, 3);\nList<String> asStrings = Lists.transform(numbers, Functions.toStringFunction());\nassertThat(asStrings, contains(\"1\", \"2\", \"3\"));\n\n\n//组合使用\nList<Integer> numbers = Arrays.asList(2, 1, 11, 100, 8, 14);\nPredicate<Integer> acceptEvenNumber = new Predicate<Integer>() {\n    @Override\n    public boolean apply(Integer number) {\n        return (number % 2) == 0;\n    }\n};\nFunction<Integer, Integer> powerOfTwo = new Function<Integer, Integer>() {\n    @Override\n    public Integer apply(Integer input) {\n        return (int) Math.pow(input, 2);\n    }\n};\n \nFluentIterable<Integer> powerOfTwoOnlyForEvenNumbers = \nFluentIterable.from(numbers).filter(acceptEvenNumber).transform(powerOfTwo);\nassertThat(powerOfTwoOnlyForEvenNumbers, contains(4, 10000, 64, 196));\n```\n \n除了这两个函数，guava中的集合相关的类还有许多接口支持函数式编程，比如集合类的filter相关接口，如Iterables.filter(Iterable,Predicate),\n以及若干用Predicate处理Iterable的工具，比如\n> * boolean all(Iterable, Predicate)  \n> * boolean any(Iterable, Predicate)\n> * T find(Iterable, Predicate)\n> * Optional<T> tryFind(Iterable, Predicate)\n> * indexOf(Iterable, Predicate)\n> * removeIf(Iterable, Predicate)\n\n以及一些Transform函数\n> * Iterables.transform(Iterable, Function)FluentIterable.transform(Function) \n> * Iterators.transform(Iterator, Function)\n> * Collections2.transform(Collection, Function)\n> * Lists.transform(List, Function)\n> * Maps.transformValues(Map, Function)Maps.transformEntries(Map, EntryTransformer)\n> * Maps.transformValues(SortedMap, Function)Maps.transformEntries(SortedMap, EntryTransformer)\n> * Multimaps.transformValues(Multimap, Function)Multimaps.transformEntries(Multimap, EntryTransformer)\n> * Multimaps.transformValues(ListMultimap, Function)Multimaps.transformEntries(ListMultimap, EntryTransformer)   \n> * Tables.transformValues(Table, Function)  \n","source":"_posts/Guava VS Java 8 (3) Functional Programmming.md","raw":"---\ntitle: Guava VS Java 8 (3) Functional Programming 函数式编程\ndate: 2017-12-19 19:51:00\ntags: \n    - Java \n    - Guava\n---\n## 什么是函数式编程\n什么是函数式编程，简单的回答就是：一切都是数学函数。wiki上是这样定义的：函数式编程（英语：functional programming）或称函数程序设计，又称泛函编程，是一种编程典范，它将电脑运算视为数学上的函数计算，并且避免使用程序状态以及易变对象。函数编程语言最重要的基础是λ演算（lambda calculus）。而且λ演算的函数可以接受函数当作输入（引数）和输出（传出值）。换一种可以理解的说法，就是在函数式编程中，对象只代表参数：入参以及出参，参数没有状态的改变。同时，在函数式编程中没有for/next的循环，这个循环意味着状态随时可以改变，相反的是，函数式编程中，通过递归来实现这种改变。\n\n## java 8 和 guava中的函数式编程\n在guava中，除了集合的一些函数式接口，例如Collection2.filter等以外，还提供了两个基本的函数式接口，分别是：\n> * Function<A, B>\n> * Predicate<T>\n\n举两个例子，分别说明Function和predicate的用法\n```java\n//使用自定义的Predicate函数\nList<Integer> numbers = Lists.newArrayList(1, 2, 3, 6, 10, 34, 57, 89);\nPredicate<Integer> acceptEven = new Predicate<Integer>() {\n    @Override\n    public boolean apply(Integer number) {\n        return (number % 2) == 0;\n    }\n};\nList<Integer> evenNumbers = Lists.newArrayList(Collections2.filter(numbers, acceptEven));\nInteger found = Collections.binarySearch(evenNumbers, 57);\nassertThat(found, lessThan(0));\n\n\n//使用一个简单的Function函数\nList<Integer> numbers = Lists.newArrayList(1, 2, 3);\nList<String> asStrings = Lists.transform(numbers, Functions.toStringFunction());\nassertThat(asStrings, contains(\"1\", \"2\", \"3\"));\n\n\n//组合使用\nList<Integer> numbers = Arrays.asList(2, 1, 11, 100, 8, 14);\nPredicate<Integer> acceptEvenNumber = new Predicate<Integer>() {\n    @Override\n    public boolean apply(Integer number) {\n        return (number % 2) == 0;\n    }\n};\nFunction<Integer, Integer> powerOfTwo = new Function<Integer, Integer>() {\n    @Override\n    public Integer apply(Integer input) {\n        return (int) Math.pow(input, 2);\n    }\n};\n \nFluentIterable<Integer> powerOfTwoOnlyForEvenNumbers = \nFluentIterable.from(numbers).filter(acceptEvenNumber).transform(powerOfTwo);\nassertThat(powerOfTwoOnlyForEvenNumbers, contains(4, 10000, 64, 196));\n```\n \n除了这两个函数，guava中的集合相关的类还有许多接口支持函数式编程，比如集合类的filter相关接口，如Iterables.filter(Iterable,Predicate),\n以及若干用Predicate处理Iterable的工具，比如\n> * boolean all(Iterable, Predicate)  \n> * boolean any(Iterable, Predicate)\n> * T find(Iterable, Predicate)\n> * Optional<T> tryFind(Iterable, Predicate)\n> * indexOf(Iterable, Predicate)\n> * removeIf(Iterable, Predicate)\n\n以及一些Transform函数\n> * Iterables.transform(Iterable, Function)FluentIterable.transform(Function) \n> * Iterators.transform(Iterator, Function)\n> * Collections2.transform(Collection, Function)\n> * Lists.transform(List, Function)\n> * Maps.transformValues(Map, Function)Maps.transformEntries(Map, EntryTransformer)\n> * Maps.transformValues(SortedMap, Function)Maps.transformEntries(SortedMap, EntryTransformer)\n> * Multimaps.transformValues(Multimap, Function)Multimaps.transformEntries(Multimap, EntryTransformer)\n> * Multimaps.transformValues(ListMultimap, Function)Multimaps.transformEntries(ListMultimap, EntryTransformer)   \n> * Tables.transformValues(Table, Function)  \n","slug":"Guava VS Java 8 (3) Functional Programmming","published":1,"updated":"2017-12-19T13:47:36.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtn0mi4a0001u4u1nltx6jq9","content":"<h2 id=\"什么是函数式编程\"><a href=\"#什么是函数式编程\" class=\"headerlink\" title=\"什么是函数式编程\"></a>什么是函数式编程</h2><p>什么是函数式编程，简单的回答就是：一切都是数学函数。wiki上是这样定义的：函数式编程（英语：functional programming）或称函数程序设计，又称泛函编程，是一种编程典范，它将电脑运算视为数学上的函数计算，并且避免使用程序状态以及易变对象。函数编程语言最重要的基础是λ演算（lambda calculus）。而且λ演算的函数可以接受函数当作输入（引数）和输出（传出值）。换一种可以理解的说法，就是在函数式编程中，对象只代表参数：入参以及出参，参数没有状态的改变。同时，在函数式编程中没有for/next的循环，这个循环意味着状态随时可以改变，相反的是，函数式编程中，通过递归来实现这种改变。</p>\n<h2 id=\"java-8-和-guava中的函数式编程\"><a href=\"#java-8-和-guava中的函数式编程\" class=\"headerlink\" title=\"java 8 和 guava中的函数式编程\"></a>java 8 和 guava中的函数式编程</h2><p>在guava中，除了集合的一些函数式接口，例如Collection2.filter等以外，还提供了两个基本的函数式接口，分别是：</p>\n<blockquote>\n<ul>\n<li>Function<a, b=\"\"></a,></li>\n<li>Predicate<t></t></li>\n</ul>\n</blockquote>\n<p>举两个例子，分别说明Function和predicate的用法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//使用自定义的Predicate函数</span></div><div class=\"line\">List&lt;Integer&gt; numbers = Lists.newArrayList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">10</span>, <span class=\"number\">34</span>, <span class=\"number\">57</span>, <span class=\"number\">89</span>);</div><div class=\"line\">Predicate&lt;Integer&gt; acceptEven = <span class=\"keyword\">new</span> Predicate&lt;Integer&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">apply</span><span class=\"params\">(Integer number)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (number % <span class=\"number\">2</span>) == <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">List&lt;Integer&gt; evenNumbers = Lists.newArrayList(Collections2.filter(numbers, acceptEven));</div><div class=\"line\">Integer found = Collections.binarySearch(evenNumbers, <span class=\"number\">57</span>);</div><div class=\"line\">assertThat(found, lessThan(<span class=\"number\">0</span>));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使用一个简单的Function函数</span></div><div class=\"line\">List&lt;Integer&gt; numbers = Lists.newArrayList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</div><div class=\"line\">List&lt;String&gt; asStrings = Lists.transform(numbers, Functions.toStringFunction());</div><div class=\"line\">assertThat(asStrings, contains(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//组合使用</span></div><div class=\"line\">List&lt;Integer&gt; numbers = Arrays.asList(<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">11</span>, <span class=\"number\">100</span>, <span class=\"number\">8</span>, <span class=\"number\">14</span>);</div><div class=\"line\">Predicate&lt;Integer&gt; acceptEvenNumber = <span class=\"keyword\">new</span> Predicate&lt;Integer&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">apply</span><span class=\"params\">(Integer number)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (number % <span class=\"number\">2</span>) == <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">Function&lt;Integer, Integer&gt; powerOfTwo = <span class=\"keyword\">new</span> Function&lt;Integer, Integer&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">apply</span><span class=\"params\">(Integer input)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) Math.pow(input, <span class=\"number\">2</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"> </div><div class=\"line\">FluentIterable&lt;Integer&gt; powerOfTwoOnlyForEvenNumbers = </div><div class=\"line\">FluentIterable.from(numbers).filter(acceptEvenNumber).transform(powerOfTwo);</div><div class=\"line\">assertThat(powerOfTwoOnlyForEvenNumbers, contains(<span class=\"number\">4</span>, <span class=\"number\">10000</span>, <span class=\"number\">64</span>, <span class=\"number\">196</span>));</div></pre></td></tr></table></figure></p>\n<p>除了这两个函数，guava中的集合相关的类还有许多接口支持函数式编程，比如集合类的filter相关接口，如Iterables.filter(Iterable,Predicate),<br>以及若干用Predicate处理Iterable的工具，比如</p>\n<blockquote>\n<ul>\n<li>boolean all(Iterable, Predicate)  </li>\n<li>boolean any(Iterable, Predicate)</li>\n<li>T find(Iterable, Predicate)</li>\n<li>Optional<t> tryFind(Iterable, Predicate)</t></li>\n<li>indexOf(Iterable, Predicate)</li>\n<li>removeIf(Iterable, Predicate)</li>\n</ul>\n</blockquote>\n<p>以及一些Transform函数</p>\n<blockquote>\n<ul>\n<li>Iterables.transform(Iterable, Function)FluentIterable.transform(Function) </li>\n<li>Iterators.transform(Iterator, Function)</li>\n<li>Collections2.transform(Collection, Function)</li>\n<li>Lists.transform(List, Function)</li>\n<li>Maps.transformValues(Map, Function)Maps.transformEntries(Map, EntryTransformer)</li>\n<li>Maps.transformValues(SortedMap, Function)Maps.transformEntries(SortedMap, EntryTransformer)</li>\n<li>Multimaps.transformValues(Multimap, Function)Multimaps.transformEntries(Multimap, EntryTransformer)</li>\n<li>Multimaps.transformValues(ListMultimap, Function)Multimaps.transformEntries(ListMultimap, EntryTransformer)   </li>\n<li>Tables.transformValues(Table, Function)  </li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是函数式编程\"><a href=\"#什么是函数式编程\" class=\"headerlink\" title=\"什么是函数式编程\"></a>什么是函数式编程</h2><p>什么是函数式编程，简单的回答就是：一切都是数学函数。wiki上是这样定义的：函数式编程（英语：functional programming）或称函数程序设计，又称泛函编程，是一种编程典范，它将电脑运算视为数学上的函数计算，并且避免使用程序状态以及易变对象。函数编程语言最重要的基础是λ演算（lambda calculus）。而且λ演算的函数可以接受函数当作输入（引数）和输出（传出值）。换一种可以理解的说法，就是在函数式编程中，对象只代表参数：入参以及出参，参数没有状态的改变。同时，在函数式编程中没有for/next的循环，这个循环意味着状态随时可以改变，相反的是，函数式编程中，通过递归来实现这种改变。</p>\n<h2 id=\"java-8-和-guava中的函数式编程\"><a href=\"#java-8-和-guava中的函数式编程\" class=\"headerlink\" title=\"java 8 和 guava中的函数式编程\"></a>java 8 和 guava中的函数式编程</h2><p>在guava中，除了集合的一些函数式接口，例如Collection2.filter等以外，还提供了两个基本的函数式接口，分别是：</p>\n<blockquote>\n<ul>\n<li>Function<a, b=\"\"></a,></li>\n<li>Predicate<t></t></li>\n</ul>\n</blockquote>\n<p>举两个例子，分别说明Function和predicate的用法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//使用自定义的Predicate函数</span></div><div class=\"line\">List&lt;Integer&gt; numbers = Lists.newArrayList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">10</span>, <span class=\"number\">34</span>, <span class=\"number\">57</span>, <span class=\"number\">89</span>);</div><div class=\"line\">Predicate&lt;Integer&gt; acceptEven = <span class=\"keyword\">new</span> Predicate&lt;Integer&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">apply</span><span class=\"params\">(Integer number)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (number % <span class=\"number\">2</span>) == <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">List&lt;Integer&gt; evenNumbers = Lists.newArrayList(Collections2.filter(numbers, acceptEven));</div><div class=\"line\">Integer found = Collections.binarySearch(evenNumbers, <span class=\"number\">57</span>);</div><div class=\"line\">assertThat(found, lessThan(<span class=\"number\">0</span>));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使用一个简单的Function函数</span></div><div class=\"line\">List&lt;Integer&gt; numbers = Lists.newArrayList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</div><div class=\"line\">List&lt;String&gt; asStrings = Lists.transform(numbers, Functions.toStringFunction());</div><div class=\"line\">assertThat(asStrings, contains(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//组合使用</span></div><div class=\"line\">List&lt;Integer&gt; numbers = Arrays.asList(<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">11</span>, <span class=\"number\">100</span>, <span class=\"number\">8</span>, <span class=\"number\">14</span>);</div><div class=\"line\">Predicate&lt;Integer&gt; acceptEvenNumber = <span class=\"keyword\">new</span> Predicate&lt;Integer&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">apply</span><span class=\"params\">(Integer number)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (number % <span class=\"number\">2</span>) == <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">Function&lt;Integer, Integer&gt; powerOfTwo = <span class=\"keyword\">new</span> Function&lt;Integer, Integer&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">apply</span><span class=\"params\">(Integer input)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) Math.pow(input, <span class=\"number\">2</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"> </div><div class=\"line\">FluentIterable&lt;Integer&gt; powerOfTwoOnlyForEvenNumbers = </div><div class=\"line\">FluentIterable.from(numbers).filter(acceptEvenNumber).transform(powerOfTwo);</div><div class=\"line\">assertThat(powerOfTwoOnlyForEvenNumbers, contains(<span class=\"number\">4</span>, <span class=\"number\">10000</span>, <span class=\"number\">64</span>, <span class=\"number\">196</span>));</div></pre></td></tr></table></figure></p>\n<p>除了这两个函数，guava中的集合相关的类还有许多接口支持函数式编程，比如集合类的filter相关接口，如Iterables.filter(Iterable,Predicate),<br>以及若干用Predicate处理Iterable的工具，比如</p>\n<blockquote>\n<ul>\n<li>boolean all(Iterable, Predicate)  </li>\n<li>boolean any(Iterable, Predicate)</li>\n<li>T find(Iterable, Predicate)</li>\n<li>Optional<t> tryFind(Iterable, Predicate)</t></li>\n<li>indexOf(Iterable, Predicate)</li>\n<li>removeIf(Iterable, Predicate)</li>\n</ul>\n</blockquote>\n<p>以及一些Transform函数</p>\n<blockquote>\n<ul>\n<li>Iterables.transform(Iterable, Function)FluentIterable.transform(Function) </li>\n<li>Iterators.transform(Iterator, Function)</li>\n<li>Collections2.transform(Collection, Function)</li>\n<li>Lists.transform(List, Function)</li>\n<li>Maps.transformValues(Map, Function)Maps.transformEntries(Map, EntryTransformer)</li>\n<li>Maps.transformValues(SortedMap, Function)Maps.transformEntries(SortedMap, EntryTransformer)</li>\n<li>Multimaps.transformValues(Multimap, Function)Multimaps.transformEntries(Multimap, EntryTransformer)</li>\n<li>Multimaps.transformValues(ListMultimap, Function)Multimaps.transformEntries(ListMultimap, EntryTransformer)   </li>\n<li>Tables.transformValues(Table, Function)  </li>\n</ul>\n</blockquote>\n"},{"title":"Guava VS Java 8 (1) Optional","date":"2017-11-22T15:30:00.000Z","_content":"\n## 背景\nGuava对于广大Java开发者来说是一个很有用的工具，提供了很多原生JDK不存在但是却非常有用的原生的类和方法，但是，自从Java 8 发布之后，Java 8 弥补了一些之前的缺憾，一些特性和Guava提供的方法和类非常相似，接下来，将会总结Guava 和Java 8 之间的相同点和不同点。截止目前（2017年11月22日），Guava的最新版本为23.0，就以当前这个版本和Java 8 作比较。\n\n首先对比Optional\n![](/images/Optional-Java.PNG) ![](/images/Optional-Guava.PNG)\n左边是Java 8 中的Optional，右边是Guava中的Optional\n\n对比来看，两个类非常相似，Java 8中的除了filter，map，flatMap这三个方法，其余的方法都可以在Guava中找到对应或重载的方法，反过来，Guava中的Optiona主要多了和Java 8的Optional类转换的三个方法以及一些别的方法。\n\n以Java 8中的Optional为例，两者大部分方法相同，例如\nof：为非null的值创建一个Optional；\nofNullable：为指定的值创建一个Optional，如果指定的值为null，则返回一个空的Optional；\nisPresent：如果值存在返回true，否则返回false；\nget：如果Optional有值则将其返回，否则抛出NoSuchElementException；\nifPresent：如果Optional实例有值则为其调用consumer，否则不做处理；\norElse：如果有值则将其返回，否则返回指定的其它值；\norElseGet：orElseGet与orElse方法类似，区别在于得到的默认值。orElse方法将传入的字符串作为默认值，orElseGet方法可以接受Supplier接口的实现用来生成默认值；\norElseThrow：如果有值则将其返回，否则抛出supplier接口创建的异常；\n\nJava 8中有三个方法Guava中并没有对应的方法：map,flatMap以及filter方法\n\n### map\nmap方法对应的解释如下：如果有值，则对其执行调用mapping函数得到返回值。如果返回值不为null，则创建包含mapping返回值的Optional作为map方法返回值，否则返回空Optional。\n\n```java\n     Optional<FileInputStream> fis =\n         names.stream().filter(name -> !isProcessedYet(name))\n                       .findFirst()\n                       .map(name -> new FileInputStream(name));\n```\n上面是jdk 8中注释的示例代码，从一个文件names的流中过滤，从中选择还未被处理结束的文件，findFirst方法得到Optional<String>对象，最后，map方法返回Optional<FileInputStream>结果。\n\n### flatmap\n如果有值，为其执行mapping函数返回Optional类型返回值，否则返回空Optional。flatMap与map（Funtion）方法类似，区别在于flatMap中的mapper返回值必须是Optional。调用结束时，flatMap不会对结果用Optional封装。\n```java\n     Optional<FileInputStream> fis =\n         names.stream().filter(name -> !isProcessedYet(name))\n                       .findFirst()\n                       .map(name -> Optional.of(new FileInputStream(name)));\n```\n\n### filter\n如果有值并且满足断言条件返回包含该值的Optional，否则返回空Optional。\n```java\n        Optional<Integer> number = Optional.of(100);\n        Optional<Integer> biggerThan10 = number.filter((value) -> value > 10);\n        System.out.println(biggerThan10.get());\n        //输出100\n```\n\n而Guava中的Optional类和Java 8 很相似，其中多了asSet方法，将Optional对象返回为一个元素的set集合，同时，还有一些java 8 和Guava Optional相互转化的方法。\n\n## 结语\n对于Optional来说，个人觉得Java 8 可以完全取代Guava，同时，Java 8中还有filter和map使得Optional更加方便。","source":"_posts/Guava VS Java 8 (1) Optional.md","raw":"---\ntitle: Guava VS Java 8 (1) Optional\ndate: 2017-11-22 23:30:00\ntags: \n    - Java \n    - Guava\n---\n\n## 背景\nGuava对于广大Java开发者来说是一个很有用的工具，提供了很多原生JDK不存在但是却非常有用的原生的类和方法，但是，自从Java 8 发布之后，Java 8 弥补了一些之前的缺憾，一些特性和Guava提供的方法和类非常相似，接下来，将会总结Guava 和Java 8 之间的相同点和不同点。截止目前（2017年11月22日），Guava的最新版本为23.0，就以当前这个版本和Java 8 作比较。\n\n首先对比Optional\n![](/images/Optional-Java.PNG) ![](/images/Optional-Guava.PNG)\n左边是Java 8 中的Optional，右边是Guava中的Optional\n\n对比来看，两个类非常相似，Java 8中的除了filter，map，flatMap这三个方法，其余的方法都可以在Guava中找到对应或重载的方法，反过来，Guava中的Optiona主要多了和Java 8的Optional类转换的三个方法以及一些别的方法。\n\n以Java 8中的Optional为例，两者大部分方法相同，例如\nof：为非null的值创建一个Optional；\nofNullable：为指定的值创建一个Optional，如果指定的值为null，则返回一个空的Optional；\nisPresent：如果值存在返回true，否则返回false；\nget：如果Optional有值则将其返回，否则抛出NoSuchElementException；\nifPresent：如果Optional实例有值则为其调用consumer，否则不做处理；\norElse：如果有值则将其返回，否则返回指定的其它值；\norElseGet：orElseGet与orElse方法类似，区别在于得到的默认值。orElse方法将传入的字符串作为默认值，orElseGet方法可以接受Supplier接口的实现用来生成默认值；\norElseThrow：如果有值则将其返回，否则抛出supplier接口创建的异常；\n\nJava 8中有三个方法Guava中并没有对应的方法：map,flatMap以及filter方法\n\n### map\nmap方法对应的解释如下：如果有值，则对其执行调用mapping函数得到返回值。如果返回值不为null，则创建包含mapping返回值的Optional作为map方法返回值，否则返回空Optional。\n\n```java\n     Optional<FileInputStream> fis =\n         names.stream().filter(name -> !isProcessedYet(name))\n                       .findFirst()\n                       .map(name -> new FileInputStream(name));\n```\n上面是jdk 8中注释的示例代码，从一个文件names的流中过滤，从中选择还未被处理结束的文件，findFirst方法得到Optional<String>对象，最后，map方法返回Optional<FileInputStream>结果。\n\n### flatmap\n如果有值，为其执行mapping函数返回Optional类型返回值，否则返回空Optional。flatMap与map（Funtion）方法类似，区别在于flatMap中的mapper返回值必须是Optional。调用结束时，flatMap不会对结果用Optional封装。\n```java\n     Optional<FileInputStream> fis =\n         names.stream().filter(name -> !isProcessedYet(name))\n                       .findFirst()\n                       .map(name -> Optional.of(new FileInputStream(name)));\n```\n\n### filter\n如果有值并且满足断言条件返回包含该值的Optional，否则返回空Optional。\n```java\n        Optional<Integer> number = Optional.of(100);\n        Optional<Integer> biggerThan10 = number.filter((value) -> value > 10);\n        System.out.println(biggerThan10.get());\n        //输出100\n```\n\n而Guava中的Optional类和Java 8 很相似，其中多了asSet方法，将Optional对象返回为一个元素的set集合，同时，还有一些java 8 和Guava Optional相互转化的方法。\n\n## 结语\n对于Optional来说，个人觉得Java 8 可以完全取代Guava，同时，Java 8中还有filter和map使得Optional更加方便。","slug":"Guava VS Java 8 (1) Optional","published":1,"updated":"2017-11-22T17:28:52.554Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtn0mi4a0003u4u19ej8xllx","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>Guava对于广大Java开发者来说是一个很有用的工具，提供了很多原生JDK不存在但是却非常有用的原生的类和方法，但是，自从Java 8 发布之后，Java 8 弥补了一些之前的缺憾，一些特性和Guava提供的方法和类非常相似，接下来，将会总结Guava 和Java 8 之间的相同点和不同点。截止目前（2017年11月22日），Guava的最新版本为23.0，就以当前这个版本和Java 8 作比较。</p>\n<p>首先对比Optional<br><img src=\"/images/Optional-Java.PNG\" alt=\"\"> <img src=\"/images/Optional-Guava.PNG\" alt=\"\"><br>左边是Java 8 中的Optional，右边是Guava中的Optional</p>\n<p>对比来看，两个类非常相似，Java 8中的除了filter，map，flatMap这三个方法，其余的方法都可以在Guava中找到对应或重载的方法，反过来，Guava中的Optiona主要多了和Java 8的Optional类转换的三个方法以及一些别的方法。</p>\n<p>以Java 8中的Optional为例，两者大部分方法相同，例如<br>of：为非null的值创建一个Optional；<br>ofNullable：为指定的值创建一个Optional，如果指定的值为null，则返回一个空的Optional；<br>isPresent：如果值存在返回true，否则返回false；<br>get：如果Optional有值则将其返回，否则抛出NoSuchElementException；<br>ifPresent：如果Optional实例有值则为其调用consumer，否则不做处理；<br>orElse：如果有值则将其返回，否则返回指定的其它值；<br>orElseGet：orElseGet与orElse方法类似，区别在于得到的默认值。orElse方法将传入的字符串作为默认值，orElseGet方法可以接受Supplier接口的实现用来生成默认值；<br>orElseThrow：如果有值则将其返回，否则抛出supplier接口创建的异常；</p>\n<p>Java 8中有三个方法Guava中并没有对应的方法：map,flatMap以及filter方法</p>\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h3><p>map方法对应的解释如下：如果有值，则对其执行调用mapping函数得到返回值。如果返回值不为null，则创建包含mapping返回值的Optional作为map方法返回值，否则返回空Optional。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Optional&lt;FileInputStream&gt; fis =</div><div class=\"line\">    names.stream().filter(name -&gt; !isProcessedYet(name))</div><div class=\"line\">                  .findFirst()</div><div class=\"line\">                  .map(name -&gt; <span class=\"keyword\">new</span> FileInputStream(name));</div></pre></td></tr></table></figure>\n<p>上面是jdk 8中注释的示例代码，从一个文件names的流中过滤，从中选择还未被处理结束的文件，findFirst方法得到Optional<string>对象，最后，map方法返回Optional<fileinputstream>结果。</fileinputstream></string></p>\n<h3 id=\"flatmap\"><a href=\"#flatmap\" class=\"headerlink\" title=\"flatmap\"></a>flatmap</h3><p>如果有值，为其执行mapping函数返回Optional类型返回值，否则返回空Optional。flatMap与map（Funtion）方法类似，区别在于flatMap中的mapper返回值必须是Optional。调用结束时，flatMap不会对结果用Optional封装。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Optional&lt;FileInputStream&gt; fis =</div><div class=\"line\">    names.stream().filter(name -&gt; !isProcessedYet(name))</div><div class=\"line\">                  .findFirst()</div><div class=\"line\">                  .map(name -&gt; Optional.of(<span class=\"keyword\">new</span> FileInputStream(name)));</div></pre></td></tr></table></figure></p>\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h3><p>如果有值并且满足断言条件返回包含该值的Optional，否则返回空Optional。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Optional&lt;Integer&gt; number = Optional.of(<span class=\"number\">100</span>);</div><div class=\"line\">Optional&lt;Integer&gt; biggerThan10 = number.filter((value) -&gt; value &gt; <span class=\"number\">10</span>);</div><div class=\"line\">System.out.println(biggerThan10.get());</div><div class=\"line\"><span class=\"comment\">//输出100</span></div></pre></td></tr></table></figure></p>\n<p>而Guava中的Optional类和Java 8 很相似，其中多了asSet方法，将Optional对象返回为一个元素的set集合，同时，还有一些java 8 和Guava Optional相互转化的方法。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>对于Optional来说，个人觉得Java 8 可以完全取代Guava，同时，Java 8中还有filter和map使得Optional更加方便。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>Guava对于广大Java开发者来说是一个很有用的工具，提供了很多原生JDK不存在但是却非常有用的原生的类和方法，但是，自从Java 8 发布之后，Java 8 弥补了一些之前的缺憾，一些特性和Guava提供的方法和类非常相似，接下来，将会总结Guava 和Java 8 之间的相同点和不同点。截止目前（2017年11月22日），Guava的最新版本为23.0，就以当前这个版本和Java 8 作比较。</p>\n<p>首先对比Optional<br><img src=\"/images/Optional-Java.PNG\" alt=\"\"> <img src=\"/images/Optional-Guava.PNG\" alt=\"\"><br>左边是Java 8 中的Optional，右边是Guava中的Optional</p>\n<p>对比来看，两个类非常相似，Java 8中的除了filter，map，flatMap这三个方法，其余的方法都可以在Guava中找到对应或重载的方法，反过来，Guava中的Optiona主要多了和Java 8的Optional类转换的三个方法以及一些别的方法。</p>\n<p>以Java 8中的Optional为例，两者大部分方法相同，例如<br>of：为非null的值创建一个Optional；<br>ofNullable：为指定的值创建一个Optional，如果指定的值为null，则返回一个空的Optional；<br>isPresent：如果值存在返回true，否则返回false；<br>get：如果Optional有值则将其返回，否则抛出NoSuchElementException；<br>ifPresent：如果Optional实例有值则为其调用consumer，否则不做处理；<br>orElse：如果有值则将其返回，否则返回指定的其它值；<br>orElseGet：orElseGet与orElse方法类似，区别在于得到的默认值。orElse方法将传入的字符串作为默认值，orElseGet方法可以接受Supplier接口的实现用来生成默认值；<br>orElseThrow：如果有值则将其返回，否则抛出supplier接口创建的异常；</p>\n<p>Java 8中有三个方法Guava中并没有对应的方法：map,flatMap以及filter方法</p>\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h3><p>map方法对应的解释如下：如果有值，则对其执行调用mapping函数得到返回值。如果返回值不为null，则创建包含mapping返回值的Optional作为map方法返回值，否则返回空Optional。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Optional&lt;FileInputStream&gt; fis =</div><div class=\"line\">    names.stream().filter(name -&gt; !isProcessedYet(name))</div><div class=\"line\">                  .findFirst()</div><div class=\"line\">                  .map(name -&gt; <span class=\"keyword\">new</span> FileInputStream(name));</div></pre></td></tr></table></figure>\n<p>上面是jdk 8中注释的示例代码，从一个文件names的流中过滤，从中选择还未被处理结束的文件，findFirst方法得到Optional<string>对象，最后，map方法返回Optional<fileinputstream>结果。</fileinputstream></string></p>\n<h3 id=\"flatmap\"><a href=\"#flatmap\" class=\"headerlink\" title=\"flatmap\"></a>flatmap</h3><p>如果有值，为其执行mapping函数返回Optional类型返回值，否则返回空Optional。flatMap与map（Funtion）方法类似，区别在于flatMap中的mapper返回值必须是Optional。调用结束时，flatMap不会对结果用Optional封装。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Optional&lt;FileInputStream&gt; fis =</div><div class=\"line\">    names.stream().filter(name -&gt; !isProcessedYet(name))</div><div class=\"line\">                  .findFirst()</div><div class=\"line\">                  .map(name -&gt; Optional.of(<span class=\"keyword\">new</span> FileInputStream(name)));</div></pre></td></tr></table></figure></p>\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h3><p>如果有值并且满足断言条件返回包含该值的Optional，否则返回空Optional。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Optional&lt;Integer&gt; number = Optional.of(<span class=\"number\">100</span>);</div><div class=\"line\">Optional&lt;Integer&gt; biggerThan10 = number.filter((value) -&gt; value &gt; <span class=\"number\">10</span>);</div><div class=\"line\">System.out.println(biggerThan10.get());</div><div class=\"line\"><span class=\"comment\">//输出100</span></div></pre></td></tr></table></figure></p>\n<p>而Guava中的Optional类和Java 8 很相似，其中多了asSet方法，将Optional对象返回为一个元素的set集合，同时，还有一些java 8 和Guava Optional相互转化的方法。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>对于Optional来说，个人觉得Java 8 可以完全取代Guava，同时，Java 8中还有filter和map使得Optional更加方便。</p>\n"},{"title":"如何设计一个Restful风格的Api接口","date":"2017-11-12T09:24:00.000Z","_content":"\n## 什么是Restful\nREST(Representational State Transfer)，中文名字是“表述性状态转移”。这是Roy Fielding在他的博士研究中提出来的一种架构风格。他用这种架构风格概括了Web的架构原理，通过它描述了分布式系统是如何构建和运作的。REST描述了Web作为一个分布式超媒体的应用，相互链接的资源通过交换代表资源状态的表述 来进行通信。\n需要注意的是，REST不是一种标准而是一系列的约束，例如无状态，c/s结构，统一资源接口等。\n\n### REST的原则\n> * 通过URIs可以知道使用的资源\n> * 数据对象和属性的传输通过JSON或者XML\n> * 使用HTTP方法对资源操作\n> * 在交互过程中服务端不存储客户端状态\n\n### HTTP方法\n使用HTTP方法来映射CRUD(create, retrieve, update, delete)\n\n#### GET\n查询信息，GET操作必须是安全的和幂等的，换句话说，无论重复多少次请求，只要参数相同，返回的结果就相同。\n例如：查询ID为1的资源\n\n> GET /addresses/1\n\n#### POST\n通常POST新建一个实体，但是也会被用来更新\n\n> POST /addresses\n\n#### PUT \nPUT也可以新建一个实体。PUT和POST的区别在这里(https://stackoverflow.com/questions/630453/put-vs-post-in-rest),一个重要的区别就是PUT是幂等的，而POST不是。\n> PUT /addresses/1\n\n#### PATCH\n只更新URI的实体的指定字段。PATCH请求也是幂等的。POST和PATCH请求的主要区别也是幂等性。\n> PATCH /addresses/1\n\n#### DELETE\n请求的资源被删除，然而资源不必立刻删除，可以是一个异步的或者长时间的处理请求。\n> DELETE /addresses/1\n\n### HTTP 状态码\n> * 1XX-信息性\n> * 2XX-成功\n> * 3XX-重定向\n> * 4XX-客户端错误\n> * 5XX-服务端错误\n\n### 设备类型\nHTTP headers中的Accept和Content-Type可以用来描述请求的内容形式。如果要求返回结果为JSON格式，则Accept设置为application/json，相反的，如果设置Content-Type为application/xml则告诉服务端发送的请求格式为XML格式","source":"_posts/How to Design a Restful Api.md","raw":"---\ntitle: 如何设计一个Restful风格的Api接口\ndate: 2017-11-12 17:24:00\ntags: Java\n---\n\n## 什么是Restful\nREST(Representational State Transfer)，中文名字是“表述性状态转移”。这是Roy Fielding在他的博士研究中提出来的一种架构风格。他用这种架构风格概括了Web的架构原理，通过它描述了分布式系统是如何构建和运作的。REST描述了Web作为一个分布式超媒体的应用，相互链接的资源通过交换代表资源状态的表述 来进行通信。\n需要注意的是，REST不是一种标准而是一系列的约束，例如无状态，c/s结构，统一资源接口等。\n\n### REST的原则\n> * 通过URIs可以知道使用的资源\n> * 数据对象和属性的传输通过JSON或者XML\n> * 使用HTTP方法对资源操作\n> * 在交互过程中服务端不存储客户端状态\n\n### HTTP方法\n使用HTTP方法来映射CRUD(create, retrieve, update, delete)\n\n#### GET\n查询信息，GET操作必须是安全的和幂等的，换句话说，无论重复多少次请求，只要参数相同，返回的结果就相同。\n例如：查询ID为1的资源\n\n> GET /addresses/1\n\n#### POST\n通常POST新建一个实体，但是也会被用来更新\n\n> POST /addresses\n\n#### PUT \nPUT也可以新建一个实体。PUT和POST的区别在这里(https://stackoverflow.com/questions/630453/put-vs-post-in-rest),一个重要的区别就是PUT是幂等的，而POST不是。\n> PUT /addresses/1\n\n#### PATCH\n只更新URI的实体的指定字段。PATCH请求也是幂等的。POST和PATCH请求的主要区别也是幂等性。\n> PATCH /addresses/1\n\n#### DELETE\n请求的资源被删除，然而资源不必立刻删除，可以是一个异步的或者长时间的处理请求。\n> DELETE /addresses/1\n\n### HTTP 状态码\n> * 1XX-信息性\n> * 2XX-成功\n> * 3XX-重定向\n> * 4XX-客户端错误\n> * 5XX-服务端错误\n\n### 设备类型\nHTTP headers中的Accept和Content-Type可以用来描述请求的内容形式。如果要求返回结果为JSON格式，则Accept设置为application/json，相反的，如果设置Content-Type为application/xml则告诉服务端发送的请求格式为XML格式","slug":"How to Design a Restful Api","published":1,"updated":"2017-11-12T10:22:47.920Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtn0mi4q0004u4u1066ny2ii","content":"<h2 id=\"什么是Restful\"><a href=\"#什么是Restful\" class=\"headerlink\" title=\"什么是Restful\"></a>什么是Restful</h2><p>REST(Representational State Transfer)，中文名字是“表述性状态转移”。这是Roy Fielding在他的博士研究中提出来的一种架构风格。他用这种架构风格概括了Web的架构原理，通过它描述了分布式系统是如何构建和运作的。REST描述了Web作为一个分布式超媒体的应用，相互链接的资源通过交换代表资源状态的表述 来进行通信。<br>需要注意的是，REST不是一种标准而是一系列的约束，例如无状态，c/s结构，统一资源接口等。</p>\n<h3 id=\"REST的原则\"><a href=\"#REST的原则\" class=\"headerlink\" title=\"REST的原则\"></a>REST的原则</h3><blockquote>\n<ul>\n<li>通过URIs可以知道使用的资源</li>\n<li>数据对象和属性的传输通过JSON或者XML</li>\n<li>使用HTTP方法对资源操作</li>\n<li>在交互过程中服务端不存储客户端状态</li>\n</ul>\n</blockquote>\n<h3 id=\"HTTP方法\"><a href=\"#HTTP方法\" class=\"headerlink\" title=\"HTTP方法\"></a>HTTP方法</h3><p>使用HTTP方法来映射CRUD(create, retrieve, update, delete)</p>\n<h4 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h4><p>查询信息，GET操作必须是安全的和幂等的，换句话说，无论重复多少次请求，只要参数相同，返回的结果就相同。<br>例如：查询ID为1的资源</p>\n<blockquote>\n<p>GET /addresses/1</p>\n</blockquote>\n<h4 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h4><p>通常POST新建一个实体，但是也会被用来更新</p>\n<blockquote>\n<p>POST /addresses</p>\n</blockquote>\n<h4 id=\"PUT\"><a href=\"#PUT\" class=\"headerlink\" title=\"PUT\"></a>PUT</h4><p>PUT也可以新建一个实体。PUT和POST的区别在这里(<a href=\"https://stackoverflow.com/questions/630453/put-vs-post-in-rest),一个重要的区别就是PUT是幂等的，而POST不是。\" target=\"_blank\" rel=\"external\">https://stackoverflow.com/questions/630453/put-vs-post-in-rest),一个重要的区别就是PUT是幂等的，而POST不是。</a></p>\n<blockquote>\n<p>PUT /addresses/1</p>\n</blockquote>\n<h4 id=\"PATCH\"><a href=\"#PATCH\" class=\"headerlink\" title=\"PATCH\"></a>PATCH</h4><p>只更新URI的实体的指定字段。PATCH请求也是幂等的。POST和PATCH请求的主要区别也是幂等性。</p>\n<blockquote>\n<p>PATCH /addresses/1</p>\n</blockquote>\n<h4 id=\"DELETE\"><a href=\"#DELETE\" class=\"headerlink\" title=\"DELETE\"></a>DELETE</h4><p>请求的资源被删除，然而资源不必立刻删除，可以是一个异步的或者长时间的处理请求。</p>\n<blockquote>\n<p>DELETE /addresses/1</p>\n</blockquote>\n<h3 id=\"HTTP-状态码\"><a href=\"#HTTP-状态码\" class=\"headerlink\" title=\"HTTP 状态码\"></a>HTTP 状态码</h3><blockquote>\n<ul>\n<li>1XX-信息性</li>\n<li>2XX-成功</li>\n<li>3XX-重定向</li>\n<li>4XX-客户端错误</li>\n<li>5XX-服务端错误</li>\n</ul>\n</blockquote>\n<h3 id=\"设备类型\"><a href=\"#设备类型\" class=\"headerlink\" title=\"设备类型\"></a>设备类型</h3><p>HTTP headers中的Accept和Content-Type可以用来描述请求的内容形式。如果要求返回结果为JSON格式，则Accept设置为application/json，相反的，如果设置Content-Type为application/xml则告诉服务端发送的请求格式为XML格式</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是Restful\"><a href=\"#什么是Restful\" class=\"headerlink\" title=\"什么是Restful\"></a>什么是Restful</h2><p>REST(Representational State Transfer)，中文名字是“表述性状态转移”。这是Roy Fielding在他的博士研究中提出来的一种架构风格。他用这种架构风格概括了Web的架构原理，通过它描述了分布式系统是如何构建和运作的。REST描述了Web作为一个分布式超媒体的应用，相互链接的资源通过交换代表资源状态的表述 来进行通信。<br>需要注意的是，REST不是一种标准而是一系列的约束，例如无状态，c/s结构，统一资源接口等。</p>\n<h3 id=\"REST的原则\"><a href=\"#REST的原则\" class=\"headerlink\" title=\"REST的原则\"></a>REST的原则</h3><blockquote>\n<ul>\n<li>通过URIs可以知道使用的资源</li>\n<li>数据对象和属性的传输通过JSON或者XML</li>\n<li>使用HTTP方法对资源操作</li>\n<li>在交互过程中服务端不存储客户端状态</li>\n</ul>\n</blockquote>\n<h3 id=\"HTTP方法\"><a href=\"#HTTP方法\" class=\"headerlink\" title=\"HTTP方法\"></a>HTTP方法</h3><p>使用HTTP方法来映射CRUD(create, retrieve, update, delete)</p>\n<h4 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h4><p>查询信息，GET操作必须是安全的和幂等的，换句话说，无论重复多少次请求，只要参数相同，返回的结果就相同。<br>例如：查询ID为1的资源</p>\n<blockquote>\n<p>GET /addresses/1</p>\n</blockquote>\n<h4 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h4><p>通常POST新建一个实体，但是也会被用来更新</p>\n<blockquote>\n<p>POST /addresses</p>\n</blockquote>\n<h4 id=\"PUT\"><a href=\"#PUT\" class=\"headerlink\" title=\"PUT\"></a>PUT</h4><p>PUT也可以新建一个实体。PUT和POST的区别在这里(<a href=\"https://stackoverflow.com/questions/630453/put-vs-post-in-rest),一个重要的区别就是PUT是幂等的，而POST不是。\" target=\"_blank\" rel=\"external\">https://stackoverflow.com/questions/630453/put-vs-post-in-rest),一个重要的区别就是PUT是幂等的，而POST不是。</a></p>\n<blockquote>\n<p>PUT /addresses/1</p>\n</blockquote>\n<h4 id=\"PATCH\"><a href=\"#PATCH\" class=\"headerlink\" title=\"PATCH\"></a>PATCH</h4><p>只更新URI的实体的指定字段。PATCH请求也是幂等的。POST和PATCH请求的主要区别也是幂等性。</p>\n<blockquote>\n<p>PATCH /addresses/1</p>\n</blockquote>\n<h4 id=\"DELETE\"><a href=\"#DELETE\" class=\"headerlink\" title=\"DELETE\"></a>DELETE</h4><p>请求的资源被删除，然而资源不必立刻删除，可以是一个异步的或者长时间的处理请求。</p>\n<blockquote>\n<p>DELETE /addresses/1</p>\n</blockquote>\n<h3 id=\"HTTP-状态码\"><a href=\"#HTTP-状态码\" class=\"headerlink\" title=\"HTTP 状态码\"></a>HTTP 状态码</h3><blockquote>\n<ul>\n<li>1XX-信息性</li>\n<li>2XX-成功</li>\n<li>3XX-重定向</li>\n<li>4XX-客户端错误</li>\n<li>5XX-服务端错误</li>\n</ul>\n</blockquote>\n<h3 id=\"设备类型\"><a href=\"#设备类型\" class=\"headerlink\" title=\"设备类型\"></a>设备类型</h3><p>HTTP headers中的Accept和Content-Type可以用来描述请求的内容形式。如果要求返回结果为JSON格式，则Accept设置为application/json，相反的，如果设置Content-Type为application/xml则告诉服务端发送的请求格式为XML格式</p>\n"},{"title":"Plan 2019","date":"2019-01-02T14:17:00.000Z","_content":"\n去年的计划还没完成，时间却到了2019年。现在看看去年列的计划，很惭愧，只实现了其中一小部分。去年的计划也不去删除了，留下来鞭策自己。接下来列出2019年的计划。\n\n<table><tr><td></td><td>重要</td><td></td><td></td><td>不重要</td><td></td><td></td></tr><tr><td>紧迫</td><td>跳槽去BAT，TMD</td><td></td><td></td><td>减肥，去除小肚子</td><td></td><td></td></tr><tr><td></td><td>给爸妈买保险</td><td></td><td></td><td>早睡早起</td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>不紧迫</td><td>coursera学习一门课程</td><td></td><td></td><td>陪家人旅游一次</td><td></td><td></td></tr><tr><td></td><td>做一个android应用</td><td></td><td></td><td>学习尤克里里</td><td></td><td></td></tr><tr><td></td><td>修门牙</td><td></td><td></td><td>读技术书与非技术各10本</td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td>陪女朋友旅游两次</td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td>周年写信</td><td></td><td></td></tr><tr><td></td></tr></table>\n\n按照时间来划分的话，其实可以分为三类\n\n### 一次性的\n- 给爸妈买保险(75%)\n- 修正牙齿\n- 陪家人出去旅游\n- 陪女朋友出去旅游两次\n- 周年写信\n\n### 每周或者每天固定频率的\n- 每天12点睡觉，早上7点起床\n- 每天阅读书籍30分钟\n\n### 以月为维度来执行的\n- 准备跳槽去一线互联网公司（2~3个月）\n- 开发一个实时展示今日重要新闻的App（3~4个月）\n- 学习尤克里里（3~4个月）\n- 减掉小肚子（2~3个月）\n","source":"_posts/Plan 2019.md","raw":"---\ntitle: Plan 2019\ndate: 2019-01-02 22:17:00\ntags: 日常\n---\n\n去年的计划还没完成，时间却到了2019年。现在看看去年列的计划，很惭愧，只实现了其中一小部分。去年的计划也不去删除了，留下来鞭策自己。接下来列出2019年的计划。\n\n<table><tr><td></td><td>重要</td><td></td><td></td><td>不重要</td><td></td><td></td></tr><tr><td>紧迫</td><td>跳槽去BAT，TMD</td><td></td><td></td><td>减肥，去除小肚子</td><td></td><td></td></tr><tr><td></td><td>给爸妈买保险</td><td></td><td></td><td>早睡早起</td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>不紧迫</td><td>coursera学习一门课程</td><td></td><td></td><td>陪家人旅游一次</td><td></td><td></td></tr><tr><td></td><td>做一个android应用</td><td></td><td></td><td>学习尤克里里</td><td></td><td></td></tr><tr><td></td><td>修门牙</td><td></td><td></td><td>读技术书与非技术各10本</td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td>陪女朋友旅游两次</td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td>周年写信</td><td></td><td></td></tr><tr><td></td></tr></table>\n\n按照时间来划分的话，其实可以分为三类\n\n### 一次性的\n- 给爸妈买保险(75%)\n- 修正牙齿\n- 陪家人出去旅游\n- 陪女朋友出去旅游两次\n- 周年写信\n\n### 每周或者每天固定频率的\n- 每天12点睡觉，早上7点起床\n- 每天阅读书籍30分钟\n\n### 以月为维度来执行的\n- 准备跳槽去一线互联网公司（2~3个月）\n- 开发一个实时展示今日重要新闻的App（3~4个月）\n- 学习尤克里里（3~4个月）\n- 减掉小肚子（2~3个月）\n","slug":"Plan 2019","published":1,"updated":"2019-03-24T14:23:35.455Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtn0mi4q0005u4u166pfvtq3","content":"<p>去年的计划还没完成，时间却到了2019年。现在看看去年列的计划，很惭愧，只实现了其中一小部分。去年的计划也不去删除了，留下来鞭策自己。接下来列出2019年的计划。</p>\n<table><tr><td></td><td>重要</td><td></td><td></td><td>不重要</td><td></td><td></td></tr><tr><td>紧迫</td><td>跳槽去BAT，TMD</td><td></td><td></td><td>减肥，去除小肚子</td><td></td><td></td></tr><tr><td></td><td>给爸妈买保险</td><td></td><td></td><td>早睡早起</td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>不紧迫</td><td>coursera学习一门课程</td><td></td><td></td><td>陪家人旅游一次</td><td></td><td></td></tr><tr><td></td><td>做一个android应用</td><td></td><td></td><td>学习尤克里里</td><td></td><td></td></tr><tr><td></td><td>修门牙</td><td></td><td></td><td>读技术书与非技术各10本</td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td>陪女朋友旅游两次</td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td>周年写信</td><td></td><td></td></tr><tr><td></td></tr></table>\n\n<p>按照时间来划分的话，其实可以分为三类</p>\n<h3 id=\"一次性的\"><a href=\"#一次性的\" class=\"headerlink\" title=\"一次性的\"></a>一次性的</h3><ul>\n<li>给爸妈买保险(75%)</li>\n<li>修正牙齿</li>\n<li>陪家人出去旅游</li>\n<li>陪女朋友出去旅游两次</li>\n<li>周年写信</li>\n</ul>\n<h3 id=\"每周或者每天固定频率的\"><a href=\"#每周或者每天固定频率的\" class=\"headerlink\" title=\"每周或者每天固定频率的\"></a>每周或者每天固定频率的</h3><ul>\n<li>每天12点睡觉，早上7点起床</li>\n<li>每天阅读书籍30分钟</li>\n</ul>\n<h3 id=\"以月为维度来执行的\"><a href=\"#以月为维度来执行的\" class=\"headerlink\" title=\"以月为维度来执行的\"></a>以月为维度来执行的</h3><ul>\n<li>准备跳槽去一线互联网公司（2~3个月）</li>\n<li>开发一个实时展示今日重要新闻的App（3~4个月）</li>\n<li>学习尤克里里（3~4个月）</li>\n<li>减掉小肚子（2~3个月）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>去年的计划还没完成，时间却到了2019年。现在看看去年列的计划，很惭愧，只实现了其中一小部分。去年的计划也不去删除了，留下来鞭策自己。接下来列出2019年的计划。</p>\n<table><tr><td></td><td>重要</td><td></td><td></td><td>不重要</td><td></td><td></td></tr><tr><td>紧迫</td><td>跳槽去BAT，TMD</td><td></td><td></td><td>减肥，去除小肚子</td><td></td><td></td></tr><tr><td></td><td>给爸妈买保险</td><td></td><td></td><td>早睡早起</td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>不紧迫</td><td>coursera学习一门课程</td><td></td><td></td><td>陪家人旅游一次</td><td></td><td></td></tr><tr><td></td><td>做一个android应用</td><td></td><td></td><td>学习尤克里里</td><td></td><td></td></tr><tr><td></td><td>修门牙</td><td></td><td></td><td>读技术书与非技术各10本</td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td>陪女朋友旅游两次</td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td>周年写信</td><td></td><td></td></tr><tr><td></td></tr></table>\n\n<p>按照时间来划分的话，其实可以分为三类</p>\n<h3 id=\"一次性的\"><a href=\"#一次性的\" class=\"headerlink\" title=\"一次性的\"></a>一次性的</h3><ul>\n<li>给爸妈买保险(75%)</li>\n<li>修正牙齿</li>\n<li>陪家人出去旅游</li>\n<li>陪女朋友出去旅游两次</li>\n<li>周年写信</li>\n</ul>\n<h3 id=\"每周或者每天固定频率的\"><a href=\"#每周或者每天固定频率的\" class=\"headerlink\" title=\"每周或者每天固定频率的\"></a>每周或者每天固定频率的</h3><ul>\n<li>每天12点睡觉，早上7点起床</li>\n<li>每天阅读书籍30分钟</li>\n</ul>\n<h3 id=\"以月为维度来执行的\"><a href=\"#以月为维度来执行的\" class=\"headerlink\" title=\"以月为维度来执行的\"></a>以月为维度来执行的</h3><ul>\n<li>准备跳槽去一线互联网公司（2~3个月）</li>\n<li>开发一个实时展示今日重要新闻的App（3~4个月）</li>\n<li>学习尤克里里（3~4个月）</li>\n<li>减掉小肚子（2~3个月）</li>\n</ul>\n"},{"title":"将滴滴账单pdf生成Excel的工具","date":"2017-08-13T07:56:00.000Z","_content":"\n## 背景\n\n公司要求要报销的滴滴账单需要以Excel表的形式提交，而滴滴公司则是用pdf发给用户账单，所以，每次报销都会存在将pdf版本的账单转换为Excel的过程，之前是使用的手工导出，报销数量如果少还好，如果，数量一多，则需要反复的在pdf和Excel中复制粘贴，而且有时候还必须手工打字，因为滴滴账单的每段行程上是没有结束时间，只有开始时间，所以，需要自己计算，加上行程的结束时间，才能报销。每次在月末都进行这么一次的转换，实在太麻烦，所以，就需要一个小工具，自动将Excel转换为pdf。\n\n## 关键点\n> * 从pdf中读取内容\n> * 将内容按特定格式写入Excel表中\n\n## 流程\n\n### 1.从pdf中读取内容\n从pdf中读取数据需要处理传入的文件，首先需要使用Apache的pdfbox类来解析，解析成String之后，利用java的正则表达式辅助类来生成DidiSheetDTO，核心代码如下：\n\n\n```java\n//此正则表达式是为了匹配滴滴账单中每一笔行程的格式\nprivate static final Pattern pattern = Pattern.compile(\"[0-9]{1,2}+\\\\s[\\\\u4e00-\\\\u9fa5]+\\\\s([0-9\\\\-]+)\\\\s([0-9:]+)\\\\s[^\\\\s]+\\\\s+\" +\n        \"[^\\\\s]+\\\\s([^\\\\s]+)\\\\s([^\\\\s]+)\\\\s[0-9\\\\.]+\\\\s([0-9\\\\.]+).*\");\npublic static List<DidiSheetDTO> parseDidiPdf(InputStream inputStream) throws IOException{\n    if (inputStream == null) {\n        return Collections.emptyList();\n    }\n    PDDocument pdDocument = PDDocument.load(inputStream);\n    StringWriter write =  new StringWriter();\n    PDFTextStripper pdfTextStripper = new PDFTextStripper();\n    pdfTextStripper.writeText(pdDocument, write);\n    String writeBuffer = write.getBuffer().toString();\n    List<DidiSheetDTO> didiSheetDTOList = Lists.newArrayList();\n    didiSheetDTOList = parse(writeBuffer);\n    return didiSheetDTOList;\n}\n\nprivate static List<DidiSheetDTO> parse(String writeBuffer) {\n    Matcher matcher = pattern.matcher(writeBuffer);\n    List<DidiSheetDTO> didiSheetDTOList = Lists.newArrayList();\n    while (matcher.find()) {\n        DidiSheetDTO didiSheetDTO = new DidiSheetDTO();\n        didiSheetDTO.setDate(matcher.group(1));\n        didiSheetDTO.setTripDuration(matcher.group(2));\n        didiSheetDTO.setStart(matcher.group(3));\n        didiSheetDTO.setEnd(matcher.group(4));\n        didiSheetDTO.setCost(matcher.group(5));\n        didiSheetDTOList.add(didiSheetDTO);\n    }\n    return didiSheetDTOList;\n}\n\n//DTO辅助类\n//setter和getter注解为lombok中注解，可以省去setter和getter方法\npublic class DidiSheetDTO {\n    @Setter @Getter private String date;\n    @Setter @Getter private String tripDuration;\n    @Setter @Getter private String reason = \"加班\";\n    @Setter @Getter private String start;\n    @Setter @Getter private String end;\n    @Setter @Getter private String cost;\n    @Setter @Getter private String number;\n    @Setter @Getter private String name;\n    @Setter @Getter private String remark;\n}\n\n```\n\n### 2.将内容按特定格式写入Excel表中\n第一步中已经将pdf中的内容解析至DidiSheetDTOList中，这一步就是讲list中的数据按照特定格式写入Excel表中。有一个第三方库可以帮助处理java生成Excel表，就是Apache的poi包。用poi包可以将生成的DidiSheetDTOList，转化为HSSFWorkbook类，此类可以用来生成Excel表。除此之外，为了能够导出Excel表，需要使用AbstractExcelView类，继承此类并实现其中的buildExcelDocument方法。\n滴滴行程单如下：\n![](/images/didi.jpg)\n关键代码如下：\n\n```java\n//工具方法，用来将didiSheetDTOList转换为HSSFWorkbook\nprivate HSSFWorkbook buildExcel(List<DidiSheetDTO> didiSheetDTOList) {\n    HSSFWorkbook workbook = new HSSFWorkbook();\n    HSSFSheet sheet = workbook.createSheet();\n    sheet.setDefaultColumnWidth(4);\n    HSSFRow row = sheet.createRow(0);\n    HSSFCell cell = row.createCell(0);\n    cell.setCellValue(\"日期\");\n    cell = row.createCell(1);\n    cell.setCellValue(\"起止时间\");\n    cell = row.createCell(2);\n    cell.setCellValue(\"事由\");\n    cell = row.createCell(3);\n    cell.setCellValue(\"起点\");\n    cell = row.createCell(4);\n    cell.setCellValue(\"终点\");\n    cell = row.createCell(5);\n    cell.setCellValue(\"金额\");\n    cell = row.createCell(6);\n    cell.setCellValue(\"票据张数\");\n    cell = row.createCell(7);\n    cell.setCellValue(\"报销人\");\n    cell = row.createCell(8);\n    cell.setCellValue(\"备注\");\n    for (int i = 0; i < didiSheetDTOList.size(); i++){\n        row = sheet.createRow(i+1);\n        row.createCell(0).setCellValue(didiSheetDTOList.get(i).getDate());\n        row.createCell(1).setCellValue(didiSheetDTOList.get(i).getTripDuration());\n        row.createCell(2).setCellValue(didiSheetDTOList.get(i).getReason());\n        row.createCell(3).setCellValue(didiSheetDTOList.get(i).getStart());\n        row.createCell(4).setCellValue(didiSheetDTOList.get(i).getEnd());\n        row.createCell(5).setCellValue(didiSheetDTOList.get(i).getCost());\n        row.createCell(6).setCellValue(didiSheetDTOList.get(i).getNumber());\n        row.createCell(7).setCellValue(didiSheetDTOList.get(i).getName());\n        row.createCell(8).setCellValue(didiSheetDTOList.get(i).getRemark());\n    }\n    return workbook;\n}\n\n//自定义的view，用来导出Excel表\npublic class ViewExcel extends AbstractExcelView {\n    @Override\n    protected void buildExcelDocument(Map<String, Object> model, HSSFWorkbook workbook, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String filename = \"didi-taxi.xls\";//设置下载时客户端Excel的名称\n        response.setContentType(\"application/vnd.ms-excel\");\n        response.setHeader(\"Content-disposition\", \"attachment;filename=\" + filename);\n        OutputStream ouputStream = response.getOutputStream();\n        workbook.write(ouputStream);\n        ouputStream.flush();\n        ouputStream.close();\n    }\n}\n\n\n//controller层\n@PostMapping(\"/\")\npublic BaseResultDto<ModelAndView> handlerFileUpload (@RequestParam(\"file\") MultipartFile file, @RequestParam(\"name\") String name,\n                                        @RequestParam(\"costTime\") String costTime, HttpServletResponse response,\n                                        HttpServletRequest request)throws IOException,ParseException {\n    HSSFWorkbook workbook = convertPdfToExcelService.store(file,name,costTime);\n    Map obj = null;\n    ViewExcel viewExcel = new ViewExcel();\n    try {\n        viewExcel.buildExcelDocument(obj, workbook, request, response);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n//        ModelAndView modelAndView = new ModelAndView(viewExcel);\n    return new BaseResultDto<ModelAndView>(1,\"测试\",new ModelAndView(viewExcel));\n}\n\n```\n\n最终生成特定的结果，Excel如下图所示:\n![](/images/didi-excel.jpg)\n\n> 完整代码见[github](https://github.com/YiZhendong/didi-taxi-tool)","source":"_posts/didi-taxi-tool.md","raw":"---\ntitle: 将滴滴账单pdf生成Excel的工具\ndate: 2017-08-13 15:56:00\ntags: Java\n---\n\n## 背景\n\n公司要求要报销的滴滴账单需要以Excel表的形式提交，而滴滴公司则是用pdf发给用户账单，所以，每次报销都会存在将pdf版本的账单转换为Excel的过程，之前是使用的手工导出，报销数量如果少还好，如果，数量一多，则需要反复的在pdf和Excel中复制粘贴，而且有时候还必须手工打字，因为滴滴账单的每段行程上是没有结束时间，只有开始时间，所以，需要自己计算，加上行程的结束时间，才能报销。每次在月末都进行这么一次的转换，实在太麻烦，所以，就需要一个小工具，自动将Excel转换为pdf。\n\n## 关键点\n> * 从pdf中读取内容\n> * 将内容按特定格式写入Excel表中\n\n## 流程\n\n### 1.从pdf中读取内容\n从pdf中读取数据需要处理传入的文件，首先需要使用Apache的pdfbox类来解析，解析成String之后，利用java的正则表达式辅助类来生成DidiSheetDTO，核心代码如下：\n\n\n```java\n//此正则表达式是为了匹配滴滴账单中每一笔行程的格式\nprivate static final Pattern pattern = Pattern.compile(\"[0-9]{1,2}+\\\\s[\\\\u4e00-\\\\u9fa5]+\\\\s([0-9\\\\-]+)\\\\s([0-9:]+)\\\\s[^\\\\s]+\\\\s+\" +\n        \"[^\\\\s]+\\\\s([^\\\\s]+)\\\\s([^\\\\s]+)\\\\s[0-9\\\\.]+\\\\s([0-9\\\\.]+).*\");\npublic static List<DidiSheetDTO> parseDidiPdf(InputStream inputStream) throws IOException{\n    if (inputStream == null) {\n        return Collections.emptyList();\n    }\n    PDDocument pdDocument = PDDocument.load(inputStream);\n    StringWriter write =  new StringWriter();\n    PDFTextStripper pdfTextStripper = new PDFTextStripper();\n    pdfTextStripper.writeText(pdDocument, write);\n    String writeBuffer = write.getBuffer().toString();\n    List<DidiSheetDTO> didiSheetDTOList = Lists.newArrayList();\n    didiSheetDTOList = parse(writeBuffer);\n    return didiSheetDTOList;\n}\n\nprivate static List<DidiSheetDTO> parse(String writeBuffer) {\n    Matcher matcher = pattern.matcher(writeBuffer);\n    List<DidiSheetDTO> didiSheetDTOList = Lists.newArrayList();\n    while (matcher.find()) {\n        DidiSheetDTO didiSheetDTO = new DidiSheetDTO();\n        didiSheetDTO.setDate(matcher.group(1));\n        didiSheetDTO.setTripDuration(matcher.group(2));\n        didiSheetDTO.setStart(matcher.group(3));\n        didiSheetDTO.setEnd(matcher.group(4));\n        didiSheetDTO.setCost(matcher.group(5));\n        didiSheetDTOList.add(didiSheetDTO);\n    }\n    return didiSheetDTOList;\n}\n\n//DTO辅助类\n//setter和getter注解为lombok中注解，可以省去setter和getter方法\npublic class DidiSheetDTO {\n    @Setter @Getter private String date;\n    @Setter @Getter private String tripDuration;\n    @Setter @Getter private String reason = \"加班\";\n    @Setter @Getter private String start;\n    @Setter @Getter private String end;\n    @Setter @Getter private String cost;\n    @Setter @Getter private String number;\n    @Setter @Getter private String name;\n    @Setter @Getter private String remark;\n}\n\n```\n\n### 2.将内容按特定格式写入Excel表中\n第一步中已经将pdf中的内容解析至DidiSheetDTOList中，这一步就是讲list中的数据按照特定格式写入Excel表中。有一个第三方库可以帮助处理java生成Excel表，就是Apache的poi包。用poi包可以将生成的DidiSheetDTOList，转化为HSSFWorkbook类，此类可以用来生成Excel表。除此之外，为了能够导出Excel表，需要使用AbstractExcelView类，继承此类并实现其中的buildExcelDocument方法。\n滴滴行程单如下：\n![](/images/didi.jpg)\n关键代码如下：\n\n```java\n//工具方法，用来将didiSheetDTOList转换为HSSFWorkbook\nprivate HSSFWorkbook buildExcel(List<DidiSheetDTO> didiSheetDTOList) {\n    HSSFWorkbook workbook = new HSSFWorkbook();\n    HSSFSheet sheet = workbook.createSheet();\n    sheet.setDefaultColumnWidth(4);\n    HSSFRow row = sheet.createRow(0);\n    HSSFCell cell = row.createCell(0);\n    cell.setCellValue(\"日期\");\n    cell = row.createCell(1);\n    cell.setCellValue(\"起止时间\");\n    cell = row.createCell(2);\n    cell.setCellValue(\"事由\");\n    cell = row.createCell(3);\n    cell.setCellValue(\"起点\");\n    cell = row.createCell(4);\n    cell.setCellValue(\"终点\");\n    cell = row.createCell(5);\n    cell.setCellValue(\"金额\");\n    cell = row.createCell(6);\n    cell.setCellValue(\"票据张数\");\n    cell = row.createCell(7);\n    cell.setCellValue(\"报销人\");\n    cell = row.createCell(8);\n    cell.setCellValue(\"备注\");\n    for (int i = 0; i < didiSheetDTOList.size(); i++){\n        row = sheet.createRow(i+1);\n        row.createCell(0).setCellValue(didiSheetDTOList.get(i).getDate());\n        row.createCell(1).setCellValue(didiSheetDTOList.get(i).getTripDuration());\n        row.createCell(2).setCellValue(didiSheetDTOList.get(i).getReason());\n        row.createCell(3).setCellValue(didiSheetDTOList.get(i).getStart());\n        row.createCell(4).setCellValue(didiSheetDTOList.get(i).getEnd());\n        row.createCell(5).setCellValue(didiSheetDTOList.get(i).getCost());\n        row.createCell(6).setCellValue(didiSheetDTOList.get(i).getNumber());\n        row.createCell(7).setCellValue(didiSheetDTOList.get(i).getName());\n        row.createCell(8).setCellValue(didiSheetDTOList.get(i).getRemark());\n    }\n    return workbook;\n}\n\n//自定义的view，用来导出Excel表\npublic class ViewExcel extends AbstractExcelView {\n    @Override\n    protected void buildExcelDocument(Map<String, Object> model, HSSFWorkbook workbook, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String filename = \"didi-taxi.xls\";//设置下载时客户端Excel的名称\n        response.setContentType(\"application/vnd.ms-excel\");\n        response.setHeader(\"Content-disposition\", \"attachment;filename=\" + filename);\n        OutputStream ouputStream = response.getOutputStream();\n        workbook.write(ouputStream);\n        ouputStream.flush();\n        ouputStream.close();\n    }\n}\n\n\n//controller层\n@PostMapping(\"/\")\npublic BaseResultDto<ModelAndView> handlerFileUpload (@RequestParam(\"file\") MultipartFile file, @RequestParam(\"name\") String name,\n                                        @RequestParam(\"costTime\") String costTime, HttpServletResponse response,\n                                        HttpServletRequest request)throws IOException,ParseException {\n    HSSFWorkbook workbook = convertPdfToExcelService.store(file,name,costTime);\n    Map obj = null;\n    ViewExcel viewExcel = new ViewExcel();\n    try {\n        viewExcel.buildExcelDocument(obj, workbook, request, response);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n//        ModelAndView modelAndView = new ModelAndView(viewExcel);\n    return new BaseResultDto<ModelAndView>(1,\"测试\",new ModelAndView(viewExcel));\n}\n\n```\n\n最终生成特定的结果，Excel如下图所示:\n![](/images/didi-excel.jpg)\n\n> 完整代码见[github](https://github.com/YiZhendong/didi-taxi-tool)","slug":"didi-taxi-tool","published":1,"updated":"2017-08-13T08:01:55.606Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtn0mi4q0008u4u1sojq9dfy","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>公司要求要报销的滴滴账单需要以Excel表的形式提交，而滴滴公司则是用pdf发给用户账单，所以，每次报销都会存在将pdf版本的账单转换为Excel的过程，之前是使用的手工导出，报销数量如果少还好，如果，数量一多，则需要反复的在pdf和Excel中复制粘贴，而且有时候还必须手工打字，因为滴滴账单的每段行程上是没有结束时间，只有开始时间，所以，需要自己计算，加上行程的结束时间，才能报销。每次在月末都进行这么一次的转换，实在太麻烦，所以，就需要一个小工具，自动将Excel转换为pdf。</p>\n<h2 id=\"关键点\"><a href=\"#关键点\" class=\"headerlink\" title=\"关键点\"></a>关键点</h2><blockquote>\n<ul>\n<li>从pdf中读取内容</li>\n<li>将内容按特定格式写入Excel表中</li>\n</ul>\n</blockquote>\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><h3 id=\"1-从pdf中读取内容\"><a href=\"#1-从pdf中读取内容\" class=\"headerlink\" title=\"1.从pdf中读取内容\"></a>1.从pdf中读取内容</h3><p>从pdf中读取数据需要处理传入的文件，首先需要使用Apache的pdfbox类来解析，解析成String之后，利用java的正则表达式辅助类来生成DidiSheetDTO，核心代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//此正则表达式是为了匹配滴滴账单中每一笔行程的格式</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Pattern pattern = Pattern.compile(<span class=\"string\">\"[0-9]&#123;1,2&#125;+\\\\s[\\\\u4e00-\\\\u9fa5]+\\\\s([0-9\\\\-]+)\\\\s([0-9:]+)\\\\s[^\\\\s]+\\\\s+\"</span> +</div><div class=\"line\">        <span class=\"string\">\"[^\\\\s]+\\\\s([^\\\\s]+)\\\\s([^\\\\s]+)\\\\s[0-9\\\\.]+\\\\s([0-9\\\\.]+).*\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;DidiSheetDTO&gt; <span class=\"title\">parseDidiPdf</span><span class=\"params\">(InputStream inputStream)</span> <span class=\"keyword\">throws</span> IOException</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (inputStream == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Collections.emptyList();</div><div class=\"line\">    &#125;</div><div class=\"line\">    PDDocument pdDocument = PDDocument.load(inputStream);</div><div class=\"line\">    StringWriter write =  <span class=\"keyword\">new</span> StringWriter();</div><div class=\"line\">    PDFTextStripper pdfTextStripper = <span class=\"keyword\">new</span> PDFTextStripper();</div><div class=\"line\">    pdfTextStripper.writeText(pdDocument, write);</div><div class=\"line\">    String writeBuffer = write.getBuffer().toString();</div><div class=\"line\">    List&lt;DidiSheetDTO&gt; didiSheetDTOList = Lists.newArrayList();</div><div class=\"line\">    didiSheetDTOList = parse(writeBuffer);</div><div class=\"line\">    <span class=\"keyword\">return</span> didiSheetDTOList;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;DidiSheetDTO&gt; <span class=\"title\">parse</span><span class=\"params\">(String writeBuffer)</span> </span>&#123;</div><div class=\"line\">    Matcher matcher = pattern.matcher(writeBuffer);</div><div class=\"line\">    List&lt;DidiSheetDTO&gt; didiSheetDTOList = Lists.newArrayList();</div><div class=\"line\">    <span class=\"keyword\">while</span> (matcher.find()) &#123;</div><div class=\"line\">        DidiSheetDTO didiSheetDTO = <span class=\"keyword\">new</span> DidiSheetDTO();</div><div class=\"line\">        didiSheetDTO.setDate(matcher.group(<span class=\"number\">1</span>));</div><div class=\"line\">        didiSheetDTO.setTripDuration(matcher.group(<span class=\"number\">2</span>));</div><div class=\"line\">        didiSheetDTO.setStart(matcher.group(<span class=\"number\">3</span>));</div><div class=\"line\">        didiSheetDTO.setEnd(matcher.group(<span class=\"number\">4</span>));</div><div class=\"line\">        didiSheetDTO.setCost(matcher.group(<span class=\"number\">5</span>));</div><div class=\"line\">        didiSheetDTOList.add(didiSheetDTO);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> didiSheetDTOList;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//DTO辅助类</span></div><div class=\"line\"><span class=\"comment\">//setter和getter注解为lombok中注解，可以省去setter和getter方法</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DidiSheetDTO</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Setter</span> <span class=\"meta\">@Getter</span> <span class=\"keyword\">private</span> String date;</div><div class=\"line\">    <span class=\"meta\">@Setter</span> <span class=\"meta\">@Getter</span> <span class=\"keyword\">private</span> String tripDuration;</div><div class=\"line\">    <span class=\"meta\">@Setter</span> <span class=\"meta\">@Getter</span> <span class=\"keyword\">private</span> String reason = <span class=\"string\">\"加班\"</span>;</div><div class=\"line\">    <span class=\"meta\">@Setter</span> <span class=\"meta\">@Getter</span> <span class=\"keyword\">private</span> String start;</div><div class=\"line\">    <span class=\"meta\">@Setter</span> <span class=\"meta\">@Getter</span> <span class=\"keyword\">private</span> String end;</div><div class=\"line\">    <span class=\"meta\">@Setter</span> <span class=\"meta\">@Getter</span> <span class=\"keyword\">private</span> String cost;</div><div class=\"line\">    <span class=\"meta\">@Setter</span> <span class=\"meta\">@Getter</span> <span class=\"keyword\">private</span> String number;</div><div class=\"line\">    <span class=\"meta\">@Setter</span> <span class=\"meta\">@Getter</span> <span class=\"keyword\">private</span> String name;</div><div class=\"line\">    <span class=\"meta\">@Setter</span> <span class=\"meta\">@Getter</span> <span class=\"keyword\">private</span> String remark;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"2-将内容按特定格式写入Excel表中\"><a href=\"#2-将内容按特定格式写入Excel表中\" class=\"headerlink\" title=\"2.将内容按特定格式写入Excel表中\"></a>2.将内容按特定格式写入Excel表中</h3><p>第一步中已经将pdf中的内容解析至DidiSheetDTOList中，这一步就是讲list中的数据按照特定格式写入Excel表中。有一个第三方库可以帮助处理java生成Excel表，就是Apache的poi包。用poi包可以将生成的DidiSheetDTOList，转化为HSSFWorkbook类，此类可以用来生成Excel表。除此之外，为了能够导出Excel表，需要使用AbstractExcelView类，继承此类并实现其中的buildExcelDocument方法。<br>滴滴行程单如下：<br><img src=\"/images/didi.jpg\" alt=\"\"><br>关键代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//工具方法，用来将didiSheetDTOList转换为HSSFWorkbook</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> HSSFWorkbook <span class=\"title\">buildExcel</span><span class=\"params\">(List&lt;DidiSheetDTO&gt; didiSheetDTOList)</span> </span>&#123;</div><div class=\"line\">    HSSFWorkbook workbook = <span class=\"keyword\">new</span> HSSFWorkbook();</div><div class=\"line\">    HSSFSheet sheet = workbook.createSheet();</div><div class=\"line\">    sheet.setDefaultColumnWidth(<span class=\"number\">4</span>);</div><div class=\"line\">    HSSFRow row = sheet.createRow(<span class=\"number\">0</span>);</div><div class=\"line\">    HSSFCell cell = row.createCell(<span class=\"number\">0</span>);</div><div class=\"line\">    cell.setCellValue(<span class=\"string\">\"日期\"</span>);</div><div class=\"line\">    cell = row.createCell(<span class=\"number\">1</span>);</div><div class=\"line\">    cell.setCellValue(<span class=\"string\">\"起止时间\"</span>);</div><div class=\"line\">    cell = row.createCell(<span class=\"number\">2</span>);</div><div class=\"line\">    cell.setCellValue(<span class=\"string\">\"事由\"</span>);</div><div class=\"line\">    cell = row.createCell(<span class=\"number\">3</span>);</div><div class=\"line\">    cell.setCellValue(<span class=\"string\">\"起点\"</span>);</div><div class=\"line\">    cell = row.createCell(<span class=\"number\">4</span>);</div><div class=\"line\">    cell.setCellValue(<span class=\"string\">\"终点\"</span>);</div><div class=\"line\">    cell = row.createCell(<span class=\"number\">5</span>);</div><div class=\"line\">    cell.setCellValue(<span class=\"string\">\"金额\"</span>);</div><div class=\"line\">    cell = row.createCell(<span class=\"number\">6</span>);</div><div class=\"line\">    cell.setCellValue(<span class=\"string\">\"票据张数\"</span>);</div><div class=\"line\">    cell = row.createCell(<span class=\"number\">7</span>);</div><div class=\"line\">    cell.setCellValue(<span class=\"string\">\"报销人\"</span>);</div><div class=\"line\">    cell = row.createCell(<span class=\"number\">8</span>);</div><div class=\"line\">    cell.setCellValue(<span class=\"string\">\"备注\"</span>);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; didiSheetDTOList.size(); i++)&#123;</div><div class=\"line\">        row = sheet.createRow(i+<span class=\"number\">1</span>);</div><div class=\"line\">        row.createCell(<span class=\"number\">0</span>).setCellValue(didiSheetDTOList.get(i).getDate());</div><div class=\"line\">        row.createCell(<span class=\"number\">1</span>).setCellValue(didiSheetDTOList.get(i).getTripDuration());</div><div class=\"line\">        row.createCell(<span class=\"number\">2</span>).setCellValue(didiSheetDTOList.get(i).getReason());</div><div class=\"line\">        row.createCell(<span class=\"number\">3</span>).setCellValue(didiSheetDTOList.get(i).getStart());</div><div class=\"line\">        row.createCell(<span class=\"number\">4</span>).setCellValue(didiSheetDTOList.get(i).getEnd());</div><div class=\"line\">        row.createCell(<span class=\"number\">5</span>).setCellValue(didiSheetDTOList.get(i).getCost());</div><div class=\"line\">        row.createCell(<span class=\"number\">6</span>).setCellValue(didiSheetDTOList.get(i).getNumber());</div><div class=\"line\">        row.createCell(<span class=\"number\">7</span>).setCellValue(didiSheetDTOList.get(i).getName());</div><div class=\"line\">        row.createCell(<span class=\"number\">8</span>).setCellValue(didiSheetDTOList.get(i).getRemark());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> workbook;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//自定义的view，用来导出Excel表</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewExcel</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractExcelView</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">buildExcelDocument</span><span class=\"params\">(Map&lt;String, Object&gt; model, HSSFWorkbook workbook, HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        String filename = <span class=\"string\">\"didi-taxi.xls\"</span>;<span class=\"comment\">//设置下载时客户端Excel的名称</span></div><div class=\"line\">        response.setContentType(<span class=\"string\">\"application/vnd.ms-excel\"</span>);</div><div class=\"line\">        response.setHeader(<span class=\"string\">\"Content-disposition\"</span>, <span class=\"string\">\"attachment;filename=\"</span> + filename);</div><div class=\"line\">        OutputStream ouputStream = response.getOutputStream();</div><div class=\"line\">        workbook.write(ouputStream);</div><div class=\"line\">        ouputStream.flush();</div><div class=\"line\">        ouputStream.close();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//controller层</span></div><div class=\"line\"><span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> BaseResultDto&lt;ModelAndView&gt; <span class=\"title\">handlerFileUpload</span> <span class=\"params\">(@RequestParam(<span class=\"string\">\"file\"</span>)</span> MultipartFile file, @<span class=\"title\">RequestParam</span><span class=\"params\">(<span class=\"string\">\"name\"</span>)</span> String name,</span></div><div class=\"line\">                                        @<span class=\"title\">RequestParam</span><span class=\"params\">(<span class=\"string\">\"costTime\"</span>)</span> String costTime, HttpServletResponse response,</div><div class=\"line\">                                        HttpServletRequest request)<span class=\"keyword\">throws</span> IOException,ParseException &#123;</div><div class=\"line\">    HSSFWorkbook workbook = convertPdfToExcelService.store(file,name,costTime);</div><div class=\"line\">    Map obj = <span class=\"keyword\">null</span>;</div><div class=\"line\">    ViewExcel viewExcel = <span class=\"keyword\">new</span> ViewExcel();</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        viewExcel.buildExcelDocument(obj, workbook, request, response);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">//        ModelAndView modelAndView = new ModelAndView(viewExcel);</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BaseResultDto&lt;ModelAndView&gt;(<span class=\"number\">1</span>,<span class=\"string\">\"测试\"</span>,<span class=\"keyword\">new</span> ModelAndView(viewExcel));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最终生成特定的结果，Excel如下图所示:<br><img src=\"/images/didi-excel.jpg\" alt=\"\"></p>\n<blockquote>\n<p>完整代码见<a href=\"https://github.com/YiZhendong/didi-taxi-tool\" target=\"_blank\" rel=\"external\">github</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>公司要求要报销的滴滴账单需要以Excel表的形式提交，而滴滴公司则是用pdf发给用户账单，所以，每次报销都会存在将pdf版本的账单转换为Excel的过程，之前是使用的手工导出，报销数量如果少还好，如果，数量一多，则需要反复的在pdf和Excel中复制粘贴，而且有时候还必须手工打字，因为滴滴账单的每段行程上是没有结束时间，只有开始时间，所以，需要自己计算，加上行程的结束时间，才能报销。每次在月末都进行这么一次的转换，实在太麻烦，所以，就需要一个小工具，自动将Excel转换为pdf。</p>\n<h2 id=\"关键点\"><a href=\"#关键点\" class=\"headerlink\" title=\"关键点\"></a>关键点</h2><blockquote>\n<ul>\n<li>从pdf中读取内容</li>\n<li>将内容按特定格式写入Excel表中</li>\n</ul>\n</blockquote>\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><h3 id=\"1-从pdf中读取内容\"><a href=\"#1-从pdf中读取内容\" class=\"headerlink\" title=\"1.从pdf中读取内容\"></a>1.从pdf中读取内容</h3><p>从pdf中读取数据需要处理传入的文件，首先需要使用Apache的pdfbox类来解析，解析成String之后，利用java的正则表达式辅助类来生成DidiSheetDTO，核心代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//此正则表达式是为了匹配滴滴账单中每一笔行程的格式</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Pattern pattern = Pattern.compile(<span class=\"string\">\"[0-9]&#123;1,2&#125;+\\\\s[\\\\u4e00-\\\\u9fa5]+\\\\s([0-9\\\\-]+)\\\\s([0-9:]+)\\\\s[^\\\\s]+\\\\s+\"</span> +</div><div class=\"line\">        <span class=\"string\">\"[^\\\\s]+\\\\s([^\\\\s]+)\\\\s([^\\\\s]+)\\\\s[0-9\\\\.]+\\\\s([0-9\\\\.]+).*\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;DidiSheetDTO&gt; <span class=\"title\">parseDidiPdf</span><span class=\"params\">(InputStream inputStream)</span> <span class=\"keyword\">throws</span> IOException</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (inputStream == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Collections.emptyList();</div><div class=\"line\">    &#125;</div><div class=\"line\">    PDDocument pdDocument = PDDocument.load(inputStream);</div><div class=\"line\">    StringWriter write =  <span class=\"keyword\">new</span> StringWriter();</div><div class=\"line\">    PDFTextStripper pdfTextStripper = <span class=\"keyword\">new</span> PDFTextStripper();</div><div class=\"line\">    pdfTextStripper.writeText(pdDocument, write);</div><div class=\"line\">    String writeBuffer = write.getBuffer().toString();</div><div class=\"line\">    List&lt;DidiSheetDTO&gt; didiSheetDTOList = Lists.newArrayList();</div><div class=\"line\">    didiSheetDTOList = parse(writeBuffer);</div><div class=\"line\">    <span class=\"keyword\">return</span> didiSheetDTOList;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;DidiSheetDTO&gt; <span class=\"title\">parse</span><span class=\"params\">(String writeBuffer)</span> </span>&#123;</div><div class=\"line\">    Matcher matcher = pattern.matcher(writeBuffer);</div><div class=\"line\">    List&lt;DidiSheetDTO&gt; didiSheetDTOList = Lists.newArrayList();</div><div class=\"line\">    <span class=\"keyword\">while</span> (matcher.find()) &#123;</div><div class=\"line\">        DidiSheetDTO didiSheetDTO = <span class=\"keyword\">new</span> DidiSheetDTO();</div><div class=\"line\">        didiSheetDTO.setDate(matcher.group(<span class=\"number\">1</span>));</div><div class=\"line\">        didiSheetDTO.setTripDuration(matcher.group(<span class=\"number\">2</span>));</div><div class=\"line\">        didiSheetDTO.setStart(matcher.group(<span class=\"number\">3</span>));</div><div class=\"line\">        didiSheetDTO.setEnd(matcher.group(<span class=\"number\">4</span>));</div><div class=\"line\">        didiSheetDTO.setCost(matcher.group(<span class=\"number\">5</span>));</div><div class=\"line\">        didiSheetDTOList.add(didiSheetDTO);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> didiSheetDTOList;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//DTO辅助类</span></div><div class=\"line\"><span class=\"comment\">//setter和getter注解为lombok中注解，可以省去setter和getter方法</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DidiSheetDTO</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Setter</span> <span class=\"meta\">@Getter</span> <span class=\"keyword\">private</span> String date;</div><div class=\"line\">    <span class=\"meta\">@Setter</span> <span class=\"meta\">@Getter</span> <span class=\"keyword\">private</span> String tripDuration;</div><div class=\"line\">    <span class=\"meta\">@Setter</span> <span class=\"meta\">@Getter</span> <span class=\"keyword\">private</span> String reason = <span class=\"string\">\"加班\"</span>;</div><div class=\"line\">    <span class=\"meta\">@Setter</span> <span class=\"meta\">@Getter</span> <span class=\"keyword\">private</span> String start;</div><div class=\"line\">    <span class=\"meta\">@Setter</span> <span class=\"meta\">@Getter</span> <span class=\"keyword\">private</span> String end;</div><div class=\"line\">    <span class=\"meta\">@Setter</span> <span class=\"meta\">@Getter</span> <span class=\"keyword\">private</span> String cost;</div><div class=\"line\">    <span class=\"meta\">@Setter</span> <span class=\"meta\">@Getter</span> <span class=\"keyword\">private</span> String number;</div><div class=\"line\">    <span class=\"meta\">@Setter</span> <span class=\"meta\">@Getter</span> <span class=\"keyword\">private</span> String name;</div><div class=\"line\">    <span class=\"meta\">@Setter</span> <span class=\"meta\">@Getter</span> <span class=\"keyword\">private</span> String remark;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"2-将内容按特定格式写入Excel表中\"><a href=\"#2-将内容按特定格式写入Excel表中\" class=\"headerlink\" title=\"2.将内容按特定格式写入Excel表中\"></a>2.将内容按特定格式写入Excel表中</h3><p>第一步中已经将pdf中的内容解析至DidiSheetDTOList中，这一步就是讲list中的数据按照特定格式写入Excel表中。有一个第三方库可以帮助处理java生成Excel表，就是Apache的poi包。用poi包可以将生成的DidiSheetDTOList，转化为HSSFWorkbook类，此类可以用来生成Excel表。除此之外，为了能够导出Excel表，需要使用AbstractExcelView类，继承此类并实现其中的buildExcelDocument方法。<br>滴滴行程单如下：<br><img src=\"/images/didi.jpg\" alt=\"\"><br>关键代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//工具方法，用来将didiSheetDTOList转换为HSSFWorkbook</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> HSSFWorkbook <span class=\"title\">buildExcel</span><span class=\"params\">(List&lt;DidiSheetDTO&gt; didiSheetDTOList)</span> </span>&#123;</div><div class=\"line\">    HSSFWorkbook workbook = <span class=\"keyword\">new</span> HSSFWorkbook();</div><div class=\"line\">    HSSFSheet sheet = workbook.createSheet();</div><div class=\"line\">    sheet.setDefaultColumnWidth(<span class=\"number\">4</span>);</div><div class=\"line\">    HSSFRow row = sheet.createRow(<span class=\"number\">0</span>);</div><div class=\"line\">    HSSFCell cell = row.createCell(<span class=\"number\">0</span>);</div><div class=\"line\">    cell.setCellValue(<span class=\"string\">\"日期\"</span>);</div><div class=\"line\">    cell = row.createCell(<span class=\"number\">1</span>);</div><div class=\"line\">    cell.setCellValue(<span class=\"string\">\"起止时间\"</span>);</div><div class=\"line\">    cell = row.createCell(<span class=\"number\">2</span>);</div><div class=\"line\">    cell.setCellValue(<span class=\"string\">\"事由\"</span>);</div><div class=\"line\">    cell = row.createCell(<span class=\"number\">3</span>);</div><div class=\"line\">    cell.setCellValue(<span class=\"string\">\"起点\"</span>);</div><div class=\"line\">    cell = row.createCell(<span class=\"number\">4</span>);</div><div class=\"line\">    cell.setCellValue(<span class=\"string\">\"终点\"</span>);</div><div class=\"line\">    cell = row.createCell(<span class=\"number\">5</span>);</div><div class=\"line\">    cell.setCellValue(<span class=\"string\">\"金额\"</span>);</div><div class=\"line\">    cell = row.createCell(<span class=\"number\">6</span>);</div><div class=\"line\">    cell.setCellValue(<span class=\"string\">\"票据张数\"</span>);</div><div class=\"line\">    cell = row.createCell(<span class=\"number\">7</span>);</div><div class=\"line\">    cell.setCellValue(<span class=\"string\">\"报销人\"</span>);</div><div class=\"line\">    cell = row.createCell(<span class=\"number\">8</span>);</div><div class=\"line\">    cell.setCellValue(<span class=\"string\">\"备注\"</span>);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; didiSheetDTOList.size(); i++)&#123;</div><div class=\"line\">        row = sheet.createRow(i+<span class=\"number\">1</span>);</div><div class=\"line\">        row.createCell(<span class=\"number\">0</span>).setCellValue(didiSheetDTOList.get(i).getDate());</div><div class=\"line\">        row.createCell(<span class=\"number\">1</span>).setCellValue(didiSheetDTOList.get(i).getTripDuration());</div><div class=\"line\">        row.createCell(<span class=\"number\">2</span>).setCellValue(didiSheetDTOList.get(i).getReason());</div><div class=\"line\">        row.createCell(<span class=\"number\">3</span>).setCellValue(didiSheetDTOList.get(i).getStart());</div><div class=\"line\">        row.createCell(<span class=\"number\">4</span>).setCellValue(didiSheetDTOList.get(i).getEnd());</div><div class=\"line\">        row.createCell(<span class=\"number\">5</span>).setCellValue(didiSheetDTOList.get(i).getCost());</div><div class=\"line\">        row.createCell(<span class=\"number\">6</span>).setCellValue(didiSheetDTOList.get(i).getNumber());</div><div class=\"line\">        row.createCell(<span class=\"number\">7</span>).setCellValue(didiSheetDTOList.get(i).getName());</div><div class=\"line\">        row.createCell(<span class=\"number\">8</span>).setCellValue(didiSheetDTOList.get(i).getRemark());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> workbook;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//自定义的view，用来导出Excel表</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewExcel</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractExcelView</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">buildExcelDocument</span><span class=\"params\">(Map&lt;String, Object&gt; model, HSSFWorkbook workbook, HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        String filename = <span class=\"string\">\"didi-taxi.xls\"</span>;<span class=\"comment\">//设置下载时客户端Excel的名称</span></div><div class=\"line\">        response.setContentType(<span class=\"string\">\"application/vnd.ms-excel\"</span>);</div><div class=\"line\">        response.setHeader(<span class=\"string\">\"Content-disposition\"</span>, <span class=\"string\">\"attachment;filename=\"</span> + filename);</div><div class=\"line\">        OutputStream ouputStream = response.getOutputStream();</div><div class=\"line\">        workbook.write(ouputStream);</div><div class=\"line\">        ouputStream.flush();</div><div class=\"line\">        ouputStream.close();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//controller层</span></div><div class=\"line\"><span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> BaseResultDto&lt;ModelAndView&gt; <span class=\"title\">handlerFileUpload</span> <span class=\"params\">(@RequestParam(<span class=\"string\">\"file\"</span>)</span> MultipartFile file, @<span class=\"title\">RequestParam</span><span class=\"params\">(<span class=\"string\">\"name\"</span>)</span> String name,</span></div><div class=\"line\">                                        @<span class=\"title\">RequestParam</span><span class=\"params\">(<span class=\"string\">\"costTime\"</span>)</span> String costTime, HttpServletResponse response,</div><div class=\"line\">                                        HttpServletRequest request)<span class=\"keyword\">throws</span> IOException,ParseException &#123;</div><div class=\"line\">    HSSFWorkbook workbook = convertPdfToExcelService.store(file,name,costTime);</div><div class=\"line\">    Map obj = <span class=\"keyword\">null</span>;</div><div class=\"line\">    ViewExcel viewExcel = <span class=\"keyword\">new</span> ViewExcel();</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        viewExcel.buildExcelDocument(obj, workbook, request, response);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">//        ModelAndView modelAndView = new ModelAndView(viewExcel);</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BaseResultDto&lt;ModelAndView&gt;(<span class=\"number\">1</span>,<span class=\"string\">\"测试\"</span>,<span class=\"keyword\">new</span> ModelAndView(viewExcel));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最终生成特定的结果，Excel如下图所示:<br><img src=\"/images/didi-excel.jpg\" alt=\"\"></p>\n<blockquote>\n<p>完整代码见<a href=\"https://github.com/YiZhendong/didi-taxi-tool\" target=\"_blank\" rel=\"external\">github</a></p>\n</blockquote>\n"},{"title":"springboot 内置的tomcat 缓存目录被删除导致的错误","date":"2017-10-18T15:20:00.000Z","_content":"\n## 背景\n今天线上出现了一个文件上传的bug，运营同学需要上传一些黑名单，但是今天上传时，出现了错误，bug信息查阅后，提示以下信息：\n\n```java\norg.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.springframework.web.multipart.MultipartException: Could not parse multipart servlet request; nested exception is java.io.IOException: The temporary upload location [/tmp/tomcat.1453407494973660739.10086/work/Tomcat/localhost/ROOT] is not valid\n```\n\n经过在网上查询，了解到，这个bug产生的原因在于，如果服务部署在CentOS系统上，那么用来存储上传文件的临时目录可能会被系统的tmpwatch命令定时删除，默认情况下，系统会删除tmp目录下30天没有访问过的文件，所以，导致了这个bug。\n\n```\nIf you choose to use Tomcat on CentOS be aware that, by default, a temporary directory is used to store compiled JSPs, file uploads etc. This directory may be deleted by tmpwatch while your application is running leading to failures. To avoid this, you may want to customize your tmpwatch configuration so that tomcat.* directories are not deleted, or configure server.tomcat.basedir so that embedded Tomcat uses a different location\n```\n\n## 解决方法\n1.重启\n2.修改/etc/cron.daily/tmpwatch文件：\n\n```shell\n#! /bin/sh\nflags=-umc\n/usr/sbin/tmpwatch \"$flags\" -x /tmp/.X11-unix -x /tmp/.XIM-unix \\\n        -x /tmp/.font-unix -x /tmp/.ICE-unix -x /tmp/.Test-unix \\\n        -X '/tmp/hsperfdata_*' 10d /tmp \\\n        -X '/tmp/tomcat.*' 10d /tmp\n/usr/sbin/tmpwatch \"$flags\" 30d /var/tmp\nfor d in /var/{cache/man,catman}/{cat?,X11R6/cat?,local/cat?}; do\n    if [ -d \"$d\" ]; then\n        /usr/sbin/tmpwatch \"$flags\" -f 30d \"$d\"\n    fi\ndone\n```\n\n注：tmpwatch  recursively  removes files which haven’t been accessed for a given time.  Normally, it’s used to clean up directories which are used for\ntemporary holding space such as /tmp.\n参数：\n-x 或–exclude=path 排除某路径\n-X 或–exclude-pattern=pattern 排除某规则下的路径\n\n","source":"_posts/Tht SpringBoot internal tomcat buffer directory was deleted leading to failures.md","raw":"---\ntitle: springboot 内置的tomcat 缓存目录被删除导致的错误\ndate: 2017-10-18 23:20\ntags: springboot\n---\n\n## 背景\n今天线上出现了一个文件上传的bug，运营同学需要上传一些黑名单，但是今天上传时，出现了错误，bug信息查阅后，提示以下信息：\n\n```java\norg.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.springframework.web.multipart.MultipartException: Could not parse multipart servlet request; nested exception is java.io.IOException: The temporary upload location [/tmp/tomcat.1453407494973660739.10086/work/Tomcat/localhost/ROOT] is not valid\n```\n\n经过在网上查询，了解到，这个bug产生的原因在于，如果服务部署在CentOS系统上，那么用来存储上传文件的临时目录可能会被系统的tmpwatch命令定时删除，默认情况下，系统会删除tmp目录下30天没有访问过的文件，所以，导致了这个bug。\n\n```\nIf you choose to use Tomcat on CentOS be aware that, by default, a temporary directory is used to store compiled JSPs, file uploads etc. This directory may be deleted by tmpwatch while your application is running leading to failures. To avoid this, you may want to customize your tmpwatch configuration so that tomcat.* directories are not deleted, or configure server.tomcat.basedir so that embedded Tomcat uses a different location\n```\n\n## 解决方法\n1.重启\n2.修改/etc/cron.daily/tmpwatch文件：\n\n```shell\n#! /bin/sh\nflags=-umc\n/usr/sbin/tmpwatch \"$flags\" -x /tmp/.X11-unix -x /tmp/.XIM-unix \\\n        -x /tmp/.font-unix -x /tmp/.ICE-unix -x /tmp/.Test-unix \\\n        -X '/tmp/hsperfdata_*' 10d /tmp \\\n        -X '/tmp/tomcat.*' 10d /tmp\n/usr/sbin/tmpwatch \"$flags\" 30d /var/tmp\nfor d in /var/{cache/man,catman}/{cat?,X11R6/cat?,local/cat?}; do\n    if [ -d \"$d\" ]; then\n        /usr/sbin/tmpwatch \"$flags\" -f 30d \"$d\"\n    fi\ndone\n```\n\n注：tmpwatch  recursively  removes files which haven’t been accessed for a given time.  Normally, it’s used to clean up directories which are used for\ntemporary holding space such as /tmp.\n参数：\n-x 或–exclude=path 排除某路径\n-X 或–exclude-pattern=pattern 排除某规则下的路径\n\n","slug":"Tht SpringBoot internal tomcat buffer directory was deleted leading to failures","published":1,"updated":"2017-10-18T15:51:27.508Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtn0mi4q0009u4u1t2zthb2k","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>今天线上出现了一个文件上传的bug，运营同学需要上传一些黑名单，但是今天上传时，出现了错误，bug信息查阅后，提示以下信息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.springframework.web.multipart.MultipartException: Could not parse multipart servlet request; nested exception is java.io.IOException: The temporary upload location [/tmp/tomcat.1453407494973660739.10086/work/Tomcat/localhost/ROOT] is not valid</div></pre></td></tr></table></figure>\n<p>经过在网上查询，了解到，这个bug产生的原因在于，如果服务部署在CentOS系统上，那么用来存储上传文件的临时目录可能会被系统的tmpwatch命令定时删除，默认情况下，系统会删除tmp目录下30天没有访问过的文件，所以，导致了这个bug。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">If you choose to use Tomcat on CentOS be aware that, by default, a temporary directory is used to store compiled JSPs, file uploads etc. This directory may be deleted by tmpwatch while your application is running leading to failures. To avoid this, you may want to customize your tmpwatch configuration so that tomcat.* directories are not deleted, or configure server.tomcat.basedir so that embedded Tomcat uses a different location</div></pre></td></tr></table></figure>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>1.重启<br>2.修改/etc/cron.daily/tmpwatch文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span>! /bin/sh</div><div class=\"line\">flags=-umc</div><div class=\"line\">/usr/sbin/tmpwatch \"$flags\" -x /tmp/.X11-unix -x /tmp/.XIM-unix \\</div><div class=\"line\">        -x /tmp/.font-unix -x /tmp/.ICE-unix -x /tmp/.Test-unix \\</div><div class=\"line\">        -X '/tmp/hsperfdata_*' 10d /tmp \\</div><div class=\"line\">        -X '/tmp/tomcat.*' 10d /tmp</div><div class=\"line\">/usr/sbin/tmpwatch \"$flags\" 30d /var/tmp</div><div class=\"line\">for d in /var/&#123;cache/man,catman&#125;/&#123;cat?,X11R6/cat?,local/cat?&#125;; do</div><div class=\"line\">    if [ -d \"$d\" ]; then</div><div class=\"line\">        /usr/sbin/tmpwatch \"$flags\" -f 30d \"$d\"</div><div class=\"line\">    fi</div><div class=\"line\">done</div></pre></td></tr></table></figure>\n<p>注：tmpwatch  recursively  removes files which haven’t been accessed for a given time.  Normally, it’s used to clean up directories which are used for<br>temporary holding space such as /tmp.<br>参数：<br>-x 或–exclude=path 排除某路径<br>-X 或–exclude-pattern=pattern 排除某规则下的路径</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>今天线上出现了一个文件上传的bug，运营同学需要上传一些黑名单，但是今天上传时，出现了错误，bug信息查阅后，提示以下信息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.springframework.web.multipart.MultipartException: Could not parse multipart servlet request; nested exception is java.io.IOException: The temporary upload location [/tmp/tomcat.1453407494973660739.10086/work/Tomcat/localhost/ROOT] is not valid</div></pre></td></tr></table></figure>\n<p>经过在网上查询，了解到，这个bug产生的原因在于，如果服务部署在CentOS系统上，那么用来存储上传文件的临时目录可能会被系统的tmpwatch命令定时删除，默认情况下，系统会删除tmp目录下30天没有访问过的文件，所以，导致了这个bug。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">If you choose to use Tomcat on CentOS be aware that, by default, a temporary directory is used to store compiled JSPs, file uploads etc. This directory may be deleted by tmpwatch while your application is running leading to failures. To avoid this, you may want to customize your tmpwatch configuration so that tomcat.* directories are not deleted, or configure server.tomcat.basedir so that embedded Tomcat uses a different location</div></pre></td></tr></table></figure>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>1.重启<br>2.修改/etc/cron.daily/tmpwatch文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span>! /bin/sh</div><div class=\"line\">flags=-umc</div><div class=\"line\">/usr/sbin/tmpwatch \"$flags\" -x /tmp/.X11-unix -x /tmp/.XIM-unix \\</div><div class=\"line\">        -x /tmp/.font-unix -x /tmp/.ICE-unix -x /tmp/.Test-unix \\</div><div class=\"line\">        -X '/tmp/hsperfdata_*' 10d /tmp \\</div><div class=\"line\">        -X '/tmp/tomcat.*' 10d /tmp</div><div class=\"line\">/usr/sbin/tmpwatch \"$flags\" 30d /var/tmp</div><div class=\"line\">for d in /var/&#123;cache/man,catman&#125;/&#123;cat?,X11R6/cat?,local/cat?&#125;; do</div><div class=\"line\">    if [ -d \"$d\" ]; then</div><div class=\"line\">        /usr/sbin/tmpwatch \"$flags\" -f 30d \"$d\"</div><div class=\"line\">    fi</div><div class=\"line\">done</div></pre></td></tr></table></figure>\n<p>注：tmpwatch  recursively  removes files which haven’t been accessed for a given time.  Normally, it’s used to clean up directories which are used for<br>temporary holding space such as /tmp.<br>参数：<br>-x 或–exclude=path 排除某路径<br>-X 或–exclude-pattern=pattern 排除某规则下的路径</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-07-23T04:35:23.029Z","updated":"2017-07-23T04:35:23.032Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtn0mi55000cu4u1vcerswve","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"zander's todo list","date":"2017-07-27T13:39:35.000Z","_content":"\n好记性不如烂笔头，虽然目前只是20多岁，但是有的时候就会有那种明明就知道，却怎么也想不起来的时候，记忆力大不如初中和高中时代。为了以后能够让自己可以回忆起来，不至于全部忘掉，故记录至此博客。 \n\n> 此篇为第一篇，列一个Todo List写下自己之前想做的没有做以及之后想要做的一些事情，截止时间暂定于2017年12月31日吧。\n\n------\n| 序号 | 时长 | 优先级 | 内容| 进度 | 状态 | 备注 | 完成时间 |\n| :--: | :--:|:----:|:----:|:----:|:----:|:----:| :----: |\n|1|3周|1|学习spring boot|100%|进行中|一直听闻spring boot很方便，但是从未真正使用spring boot开发过一个项目|2017-11-12|\n|2|1周|2|重新学习maven，并整理笔记，更新博客|100%|结束|maven工作中经常用到，原理却不是很清楚，一般都用的是同事已经搭建好的项目，自己并没有从零开始| 2017-10-29|\n|3|2周|2|学习Google的Guava库，并写一篇博客|30%|学习中|Google的一个关于Java的第三方库，非常方便|待更新···|\n|4|3周|2|需要重新看的书有：《Effective Java》、《Head First Design》，整理博客和笔记|0%|搁浅中|经典的书籍需要反复阅读，Effective Java中就有很多只看一遍是不够的，设计模式也需要多多观察，看的时候再结合工作，理解的就能更加透彻|待更新···|\n|5|4周|3|自己实现一遍Java的集合框架|0%|搁浅中|实现之后，能够更好的理解对象的设计，接口，抽象类，具体类的关系|待更新···|\n|6|4周|3|学习mybatis，设计一个自己or mapping框架|0%|搁浅中|ssm必备之一|待更新···|\n|7|4周|4|学习spring，看完《spring揭秘》,写一个自己mvc框架|0%|搁浅中|了解spring的反射，aop，ioc，启动过程等|待更新···|\n|8|2周|4|学习redis，阅读redis源码，阅读《redis设计与实现》|0%|搁浅中|国内为数不多的分析源码分析的比较好的书|待更新···|\n|9|2周|5|学习mysql，看完《高性能mysql》，并整理博客和笔记|0%|搁浅中|重温索引的设计原则，以及索引的实现原理|待更新···|\n|10|4周|6|看完《java并发编程》，实现json解析器|0%|搁浅中|对于并发编程有很深的理解才可以|待更新···|\n|11|2周|7|学习http，看完《图解HTTP》，以及《HTTP权威指南》|0%|搁浅中|了解HTTP协议|待更新···|\n|12|2周|7|学习tomcat，看完《How Tomcat Works》，整理博客和笔记|0%|搁浅中|学习tomcat|待更新···|\n|13|5周|8|学习java虚拟机，并整理笔记，更新博客，写一个java反编译器|0%|搁浅中|关于虚拟机之前看过那本经典的书，但是时间比较久了，有些忘记，需要在博客中进行整理，温故而知新|待更新···|\n|14|6周|8|学习python语言，开发一款桌面实时显示头条新闻应用|30%|搁浅中|一把瑞士军刀，可以作为第二语言，技多不压身|待更新···|\n|15|10周|9|重新看《算法》这本书，把里面的数据结构和课后习题都重新做一遍|0%|搁浅中|在准备秋招的时候看过这本书，里面的算法和数据结构觉得特别清晰，锻炼自己的思维|待更新···|\n|16|8周|9|学习Android，开发一个实时展示今日重要新闻的App|0%|搁浅中|技多不压身|待更新···|\n\n","source":"_posts/zander-s-todo-list.md","raw":"---\ntitle: zander's todo list\ndate: 2017-07-27 21:39:35\ntags: 日常\n---\n\n好记性不如烂笔头，虽然目前只是20多岁，但是有的时候就会有那种明明就知道，却怎么也想不起来的时候，记忆力大不如初中和高中时代。为了以后能够让自己可以回忆起来，不至于全部忘掉，故记录至此博客。 \n\n> 此篇为第一篇，列一个Todo List写下自己之前想做的没有做以及之后想要做的一些事情，截止时间暂定于2017年12月31日吧。\n\n------\n| 序号 | 时长 | 优先级 | 内容| 进度 | 状态 | 备注 | 完成时间 |\n| :--: | :--:|:----:|:----:|:----:|:----:|:----:| :----: |\n|1|3周|1|学习spring boot|100%|进行中|一直听闻spring boot很方便，但是从未真正使用spring boot开发过一个项目|2017-11-12|\n|2|1周|2|重新学习maven，并整理笔记，更新博客|100%|结束|maven工作中经常用到，原理却不是很清楚，一般都用的是同事已经搭建好的项目，自己并没有从零开始| 2017-10-29|\n|3|2周|2|学习Google的Guava库，并写一篇博客|30%|学习中|Google的一个关于Java的第三方库，非常方便|待更新···|\n|4|3周|2|需要重新看的书有：《Effective Java》、《Head First Design》，整理博客和笔记|0%|搁浅中|经典的书籍需要反复阅读，Effective Java中就有很多只看一遍是不够的，设计模式也需要多多观察，看的时候再结合工作，理解的就能更加透彻|待更新···|\n|5|4周|3|自己实现一遍Java的集合框架|0%|搁浅中|实现之后，能够更好的理解对象的设计，接口，抽象类，具体类的关系|待更新···|\n|6|4周|3|学习mybatis，设计一个自己or mapping框架|0%|搁浅中|ssm必备之一|待更新···|\n|7|4周|4|学习spring，看完《spring揭秘》,写一个自己mvc框架|0%|搁浅中|了解spring的反射，aop，ioc，启动过程等|待更新···|\n|8|2周|4|学习redis，阅读redis源码，阅读《redis设计与实现》|0%|搁浅中|国内为数不多的分析源码分析的比较好的书|待更新···|\n|9|2周|5|学习mysql，看完《高性能mysql》，并整理博客和笔记|0%|搁浅中|重温索引的设计原则，以及索引的实现原理|待更新···|\n|10|4周|6|看完《java并发编程》，实现json解析器|0%|搁浅中|对于并发编程有很深的理解才可以|待更新···|\n|11|2周|7|学习http，看完《图解HTTP》，以及《HTTP权威指南》|0%|搁浅中|了解HTTP协议|待更新···|\n|12|2周|7|学习tomcat，看完《How Tomcat Works》，整理博客和笔记|0%|搁浅中|学习tomcat|待更新···|\n|13|5周|8|学习java虚拟机，并整理笔记，更新博客，写一个java反编译器|0%|搁浅中|关于虚拟机之前看过那本经典的书，但是时间比较久了，有些忘记，需要在博客中进行整理，温故而知新|待更新···|\n|14|6周|8|学习python语言，开发一款桌面实时显示头条新闻应用|30%|搁浅中|一把瑞士军刀，可以作为第二语言，技多不压身|待更新···|\n|15|10周|9|重新看《算法》这本书，把里面的数据结构和课后习题都重新做一遍|0%|搁浅中|在准备秋招的时候看过这本书，里面的算法和数据结构觉得特别清晰，锻炼自己的思维|待更新···|\n|16|8周|9|学习Android，开发一个实时展示今日重要新闻的App|0%|搁浅中|技多不压身|待更新···|\n\n","slug":"zander-s-todo-list","published":1,"updated":"2017-11-22T17:41:35.513Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtn0mi55000eu4u1fe3pulkv","content":"<p>好记性不如烂笔头，虽然目前只是20多岁，但是有的时候就会有那种明明就知道，却怎么也想不起来的时候，记忆力大不如初中和高中时代。为了以后能够让自己可以回忆起来，不至于全部忘掉，故记录至此博客。 </p>\n<blockquote>\n<p>此篇为第一篇，列一个Todo List写下自己之前想做的没有做以及之后想要做的一些事情，截止时间暂定于2017年12月31日吧。</p>\n</blockquote>\n<hr>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">时长</th>\n<th style=\"text-align:center\">优先级</th>\n<th style=\"text-align:center\">内容</th>\n<th style=\"text-align:center\">进度</th>\n<th style=\"text-align:center\">状态</th>\n<th style=\"text-align:center\">备注</th>\n<th style=\"text-align:center\">完成时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">3周</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">学习spring boot</td>\n<td style=\"text-align:center\">100%</td>\n<td style=\"text-align:center\">进行中</td>\n<td style=\"text-align:center\">一直听闻spring boot很方便，但是从未真正使用spring boot开发过一个项目</td>\n<td style=\"text-align:center\">2017-11-12</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">1周</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">重新学习maven，并整理笔记，更新博客</td>\n<td style=\"text-align:center\">100%</td>\n<td style=\"text-align:center\">结束</td>\n<td style=\"text-align:center\">maven工作中经常用到，原理却不是很清楚，一般都用的是同事已经搭建好的项目，自己并没有从零开始</td>\n<td style=\"text-align:center\">2017-10-29</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">2周</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">学习Google的Guava库，并写一篇博客</td>\n<td style=\"text-align:center\">30%</td>\n<td style=\"text-align:center\">学习中</td>\n<td style=\"text-align:center\">Google的一个关于Java的第三方库，非常方便</td>\n<td style=\"text-align:center\">待更新···</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">3周</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">需要重新看的书有：《Effective Java》、《Head First Design》，整理博客和笔记</td>\n<td style=\"text-align:center\">0%</td>\n<td style=\"text-align:center\">搁浅中</td>\n<td style=\"text-align:center\">经典的书籍需要反复阅读，Effective Java中就有很多只看一遍是不够的，设计模式也需要多多观察，看的时候再结合工作，理解的就能更加透彻</td>\n<td style=\"text-align:center\">待更新···</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">4周</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">自己实现一遍Java的集合框架</td>\n<td style=\"text-align:center\">0%</td>\n<td style=\"text-align:center\">搁浅中</td>\n<td style=\"text-align:center\">实现之后，能够更好的理解对象的设计，接口，抽象类，具体类的关系</td>\n<td style=\"text-align:center\">待更新···</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">4周</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">学习mybatis，设计一个自己or mapping框架</td>\n<td style=\"text-align:center\">0%</td>\n<td style=\"text-align:center\">搁浅中</td>\n<td style=\"text-align:center\">ssm必备之一</td>\n<td style=\"text-align:center\">待更新···</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">4周</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">学习spring，看完《spring揭秘》,写一个自己mvc框架</td>\n<td style=\"text-align:center\">0%</td>\n<td style=\"text-align:center\">搁浅中</td>\n<td style=\"text-align:center\">了解spring的反射，aop，ioc，启动过程等</td>\n<td style=\"text-align:center\">待更新···</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">2周</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">学习redis，阅读redis源码，阅读《redis设计与实现》</td>\n<td style=\"text-align:center\">0%</td>\n<td style=\"text-align:center\">搁浅中</td>\n<td style=\"text-align:center\">国内为数不多的分析源码分析的比较好的书</td>\n<td style=\"text-align:center\">待更新···</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\">2周</td>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">学习mysql，看完《高性能mysql》，并整理博客和笔记</td>\n<td style=\"text-align:center\">0%</td>\n<td style=\"text-align:center\">搁浅中</td>\n<td style=\"text-align:center\">重温索引的设计原则，以及索引的实现原理</td>\n<td style=\"text-align:center\">待更新···</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\">4周</td>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">看完《java并发编程》，实现json解析器</td>\n<td style=\"text-align:center\">0%</td>\n<td style=\"text-align:center\">搁浅中</td>\n<td style=\"text-align:center\">对于并发编程有很深的理解才可以</td>\n<td style=\"text-align:center\">待更新···</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\">2周</td>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">学习http，看完《图解HTTP》，以及《HTTP权威指南》</td>\n<td style=\"text-align:center\">0%</td>\n<td style=\"text-align:center\">搁浅中</td>\n<td style=\"text-align:center\">了解HTTP协议</td>\n<td style=\"text-align:center\">待更新···</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\">2周</td>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">学习tomcat，看完《How Tomcat Works》，整理博客和笔记</td>\n<td style=\"text-align:center\">0%</td>\n<td style=\"text-align:center\">搁浅中</td>\n<td style=\"text-align:center\">学习tomcat</td>\n<td style=\"text-align:center\">待更新···</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:center\">5周</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">学习java虚拟机，并整理笔记，更新博客，写一个java反编译器</td>\n<td style=\"text-align:center\">0%</td>\n<td style=\"text-align:center\">搁浅中</td>\n<td style=\"text-align:center\">关于虚拟机之前看过那本经典的书，但是时间比较久了，有些忘记，需要在博客中进行整理，温故而知新</td>\n<td style=\"text-align:center\">待更新···</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:center\">6周</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">学习python语言，开发一款桌面实时显示头条新闻应用</td>\n<td style=\"text-align:center\">30%</td>\n<td style=\"text-align:center\">搁浅中</td>\n<td style=\"text-align:center\">一把瑞士军刀，可以作为第二语言，技多不压身</td>\n<td style=\"text-align:center\">待更新···</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:center\">10周</td>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\">重新看《算法》这本书，把里面的数据结构和课后习题都重新做一遍</td>\n<td style=\"text-align:center\">0%</td>\n<td style=\"text-align:center\">搁浅中</td>\n<td style=\"text-align:center\">在准备秋招的时候看过这本书，里面的算法和数据结构觉得特别清晰，锻炼自己的思维</td>\n<td style=\"text-align:center\">待更新···</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:center\">8周</td>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\">学习Android，开发一个实时展示今日重要新闻的App</td>\n<td style=\"text-align:center\">0%</td>\n<td style=\"text-align:center\">搁浅中</td>\n<td style=\"text-align:center\">技多不压身</td>\n<td style=\"text-align:center\">待更新···</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<p>好记性不如烂笔头，虽然目前只是20多岁，但是有的时候就会有那种明明就知道，却怎么也想不起来的时候，记忆力大不如初中和高中时代。为了以后能够让自己可以回忆起来，不至于全部忘掉，故记录至此博客。 </p>\n<blockquote>\n<p>此篇为第一篇，列一个Todo List写下自己之前想做的没有做以及之后想要做的一些事情，截止时间暂定于2017年12月31日吧。</p>\n</blockquote>\n<hr>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">时长</th>\n<th style=\"text-align:center\">优先级</th>\n<th style=\"text-align:center\">内容</th>\n<th style=\"text-align:center\">进度</th>\n<th style=\"text-align:center\">状态</th>\n<th style=\"text-align:center\">备注</th>\n<th style=\"text-align:center\">完成时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">3周</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">学习spring boot</td>\n<td style=\"text-align:center\">100%</td>\n<td style=\"text-align:center\">进行中</td>\n<td style=\"text-align:center\">一直听闻spring boot很方便，但是从未真正使用spring boot开发过一个项目</td>\n<td style=\"text-align:center\">2017-11-12</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">1周</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">重新学习maven，并整理笔记，更新博客</td>\n<td style=\"text-align:center\">100%</td>\n<td style=\"text-align:center\">结束</td>\n<td style=\"text-align:center\">maven工作中经常用到，原理却不是很清楚，一般都用的是同事已经搭建好的项目，自己并没有从零开始</td>\n<td style=\"text-align:center\">2017-10-29</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">2周</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">学习Google的Guava库，并写一篇博客</td>\n<td style=\"text-align:center\">30%</td>\n<td style=\"text-align:center\">学习中</td>\n<td style=\"text-align:center\">Google的一个关于Java的第三方库，非常方便</td>\n<td style=\"text-align:center\">待更新···</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">3周</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">需要重新看的书有：《Effective Java》、《Head First Design》，整理博客和笔记</td>\n<td style=\"text-align:center\">0%</td>\n<td style=\"text-align:center\">搁浅中</td>\n<td style=\"text-align:center\">经典的书籍需要反复阅读，Effective Java中就有很多只看一遍是不够的，设计模式也需要多多观察，看的时候再结合工作，理解的就能更加透彻</td>\n<td style=\"text-align:center\">待更新···</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">4周</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">自己实现一遍Java的集合框架</td>\n<td style=\"text-align:center\">0%</td>\n<td style=\"text-align:center\">搁浅中</td>\n<td style=\"text-align:center\">实现之后，能够更好的理解对象的设计，接口，抽象类，具体类的关系</td>\n<td style=\"text-align:center\">待更新···</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">4周</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">学习mybatis，设计一个自己or mapping框架</td>\n<td style=\"text-align:center\">0%</td>\n<td style=\"text-align:center\">搁浅中</td>\n<td style=\"text-align:center\">ssm必备之一</td>\n<td style=\"text-align:center\">待更新···</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">4周</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">学习spring，看完《spring揭秘》,写一个自己mvc框架</td>\n<td style=\"text-align:center\">0%</td>\n<td style=\"text-align:center\">搁浅中</td>\n<td style=\"text-align:center\">了解spring的反射，aop，ioc，启动过程等</td>\n<td style=\"text-align:center\">待更新···</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">2周</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">学习redis，阅读redis源码，阅读《redis设计与实现》</td>\n<td style=\"text-align:center\">0%</td>\n<td style=\"text-align:center\">搁浅中</td>\n<td style=\"text-align:center\">国内为数不多的分析源码分析的比较好的书</td>\n<td style=\"text-align:center\">待更新···</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\">2周</td>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">学习mysql，看完《高性能mysql》，并整理博客和笔记</td>\n<td style=\"text-align:center\">0%</td>\n<td style=\"text-align:center\">搁浅中</td>\n<td style=\"text-align:center\">重温索引的设计原则，以及索引的实现原理</td>\n<td style=\"text-align:center\">待更新···</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\">4周</td>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">看完《java并发编程》，实现json解析器</td>\n<td style=\"text-align:center\">0%</td>\n<td style=\"text-align:center\">搁浅中</td>\n<td style=\"text-align:center\">对于并发编程有很深的理解才可以</td>\n<td style=\"text-align:center\">待更新···</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\">2周</td>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">学习http，看完《图解HTTP》，以及《HTTP权威指南》</td>\n<td style=\"text-align:center\">0%</td>\n<td style=\"text-align:center\">搁浅中</td>\n<td style=\"text-align:center\">了解HTTP协议</td>\n<td style=\"text-align:center\">待更新···</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\">2周</td>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">学习tomcat，看完《How Tomcat Works》，整理博客和笔记</td>\n<td style=\"text-align:center\">0%</td>\n<td style=\"text-align:center\">搁浅中</td>\n<td style=\"text-align:center\">学习tomcat</td>\n<td style=\"text-align:center\">待更新···</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:center\">5周</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">学习java虚拟机，并整理笔记，更新博客，写一个java反编译器</td>\n<td style=\"text-align:center\">0%</td>\n<td style=\"text-align:center\">搁浅中</td>\n<td style=\"text-align:center\">关于虚拟机之前看过那本经典的书，但是时间比较久了，有些忘记，需要在博客中进行整理，温故而知新</td>\n<td style=\"text-align:center\">待更新···</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:center\">6周</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">学习python语言，开发一款桌面实时显示头条新闻应用</td>\n<td style=\"text-align:center\">30%</td>\n<td style=\"text-align:center\">搁浅中</td>\n<td style=\"text-align:center\">一把瑞士军刀，可以作为第二语言，技多不压身</td>\n<td style=\"text-align:center\">待更新···</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:center\">10周</td>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\">重新看《算法》这本书，把里面的数据结构和课后习题都重新做一遍</td>\n<td style=\"text-align:center\">0%</td>\n<td style=\"text-align:center\">搁浅中</td>\n<td style=\"text-align:center\">在准备秋招的时候看过这本书，里面的算法和数据结构觉得特别清晰，锻炼自己的思维</td>\n<td style=\"text-align:center\">待更新···</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:center\">8周</td>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\">学习Android，开发一个实时展示今日重要新闻的App</td>\n<td style=\"text-align:center\">0%</td>\n<td style=\"text-align:center\">搁浅中</td>\n<td style=\"text-align:center\">技多不压身</td>\n<td style=\"text-align:center\">待更新···</td>\n</tr>\n</tbody>\n</table>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjtn0mi4q0004u4u1066ny2ii","tag_id":"cjtn0mi4a0002u4u1y875chky","_id":"cjtn0mi4q0007u4u17maic3xv"},{"post_id":"cjtn0mi4q0008u4u1sojq9dfy","tag_id":"cjtn0mi4a0002u4u1y875chky","_id":"cjtn0mi55000bu4u1ek4zlp6h"},{"post_id":"cjtn0mi3v0000u4u1r6cxlgyx","tag_id":"cjtn0mi4a0002u4u1y875chky","_id":"cjtn0mi55000du4u12ft64ryx"},{"post_id":"cjtn0mi3v0000u4u1r6cxlgyx","tag_id":"cjtn0mi4q0006u4u1pimi7l92","_id":"cjtn0mi55000gu4u1xaahfbi5"},{"post_id":"cjtn0mi4a0001u4u1nltx6jq9","tag_id":"cjtn0mi4a0002u4u1y875chky","_id":"cjtn0mi55000iu4u1no5f84m6"},{"post_id":"cjtn0mi4a0001u4u1nltx6jq9","tag_id":"cjtn0mi4q0006u4u1pimi7l92","_id":"cjtn0mi55000ju4u1aiwr7oji"},{"post_id":"cjtn0mi4a0003u4u19ej8xllx","tag_id":"cjtn0mi4a0002u4u1y875chky","_id":"cjtn0mi55000mu4u1z6mfyte8"},{"post_id":"cjtn0mi4a0003u4u19ej8xllx","tag_id":"cjtn0mi4q0006u4u1pimi7l92","_id":"cjtn0mi55000nu4u1j9jvob5a"},{"post_id":"cjtn0mi4q0005u4u166pfvtq3","tag_id":"cjtn0mi55000lu4u1kr4qsn49","_id":"cjtn0mi55000pu4u1ioh6i5uu"},{"post_id":"cjtn0mi4q0009u4u1t2zthb2k","tag_id":"cjtn0mi55000ou4u1ib9ib3wy","_id":"cjtn0mi5l000ru4u1sijxhk7r"},{"post_id":"cjtn0mi55000eu4u1fe3pulkv","tag_id":"cjtn0mi55000lu4u1kr4qsn49","_id":"cjtn0mi5l000su4u13dmdkxhh"}],"Tag":[{"name":"Java","_id":"cjtn0mi4a0002u4u1y875chky"},{"name":"Guava","_id":"cjtn0mi4q0006u4u1pimi7l92"},{"name":"日常","_id":"cjtn0mi55000lu4u1kr4qsn49"},{"name":"springboot","_id":"cjtn0mi55000ou4u1ib9ib3wy"}]}}